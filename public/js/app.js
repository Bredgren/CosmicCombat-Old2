// Generated by CoffeeScript 1.6.2
(function() {
  var BaseCharacter, Camera, Characters, DebugDraw, DevGui, Energy, Game, Goku, H, Jackie, ParticleSystem, Planet, StarField, Universe, W, b2Collision, b2Common, b2Contacts, b2Controllers, b2DebugDraw, b2Dynamics, b2Joints, b2Math, b2Shapes, b2Vec2, boundedValue, log_input, main, settings, stance,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  settings = {
    DEBUG: true,
    PRINT_INPUT: false,
    FULL_SCREEN: false,
    WIDTH: 1000,
    HEIGHT: 700,
    PPM: 30,
    STAR_COUNT: 50,
    STAR_MIN_DEPTH: 1,
    STAR_MAX_DEPTH: 0,
    STAR_MAX_SIZE: 2,
    BOX2D_TIME_STEP: 1 / 60,
    BOX2D_VI: 10,
    BOX2D_PI: 10,
    BINDINGS: {
      LEFT: 65,
      RIGHT: 68,
      UP: 87,
      DOWN: 83,
      POWER_UP: 69,
      POWER_DOWN: 81,
      BLOCK: 32,
      PAUSE: 27,
      INTERACT: 67,
      FLY: 16
    }
  };

  settings.ENERGY_BAR = {
    text: {
      size: 8,
      pad: 1
    },
    width: settings.WIDTH * 0.6,
    height: settings.WIDTH * 0.6 * 0.06,
    x: settings.WIDTH / 2 - settings.WIDTH * 0.6 / 2,
    y: 15
  };

  b2Common = Box2D.Common;

  b2Math = Box2D.Common.Math;

  b2Vec2 = b2Math.b2Vec2;

  b2Collision = Box2D.Collision;

  b2Shapes = Box2D.Collision.Shapes;

  b2Dynamics = Box2D.Dynamics;

  b2Contacts = Box2D.Dynamics.Contacts;

  b2Controllers = Box2D.Dynamics.Controllers;

  b2Joints = Box2D.Dynamics.Joints;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  dat.GUI.prototype.removeFolder = function(folder) {
    this.__ul.removeChild(folder.domElement.parentNode);
    delete this.__folders[folder.name];
    return this.onResize();
  };

  Camera = (function() {
    function Camera(x, y, w, h, zoom) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.zoom = zoom != null ? zoom : 1.0;
    }

    Camera.prototype.worldToScreen = function(point) {
      return {
        x: (point.x - this.x) * settings.PPM + this.w / 2,
        y: (point.y - this.y) * settings.PPM + this.h / 2
      };
    };

    Camera.prototype.screenToWorld = function(point) {
      return {
        x: (point.x - this.w / 2) / settings.PPM + this.x,
        y: (point.y - this.h / 2) / settings.PPM + this.y
      };
    };

    Camera.prototype.screenToWorldUnits = function(point) {
      return {
        x: point.x / settings.PPM,
        y: point.y / settings.PPM
      };
    };

    Camera.prototype.worldToScreenUnits = function(point) {
      return {
        x: point.x * settings.PPM,
        y: point.y * settings.PPM
      };
    };

    Camera.prototype.onScreen = function(point) {
      var _ref, _ref1;

      return (0 <= (_ref = point.x) && _ref <= settings.WIDTH) && (0 <= (_ref1 = point.y) && _ref1 <= settings.HEIGHT);
    };

    Camera.prototype.copy = function() {
      return new Camera(this.x, this.y, this.w, this.h, this.zoom);
    };

    return Camera;

  })();

  Energy = (function() {
    function Energy(_max) {
      this._max = _max;
      this._current = this._max;
      this._strength = this._max;
    }

    Energy.prototype.strength = function() {
      return this._strength;
    };

    Energy.prototype.current = function() {
      return this._current;
    };

    Energy.prototype.max = function() {
      return this._max;
    };

    Energy.prototype.incStrength = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.decStrength(-amount);
      }
      prev = this._strength;
      this._strength = Math.min(this._strength + amount, this._current);
      return this._strength - prev;
    };

    Energy.prototype.decStrength = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.incStrength(-amount);
      }
      prev = this._strength;
      this._strength = Math.max(this._strength - amount, 0);
      return prev - this._strength;
    };

    Energy.prototype.setStrength = function(value) {
      var dif;

      dif = value - this._strength;
      return this.incStrength(dif);
    };

    Energy.prototype.incCurrent = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.decCurrent(-amount);
      }
      prev = this._current;
      this._current = Math.min(this._current + amount, this._max);
      return this._current - prev;
    };

    Energy.prototype.decCurrent = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.incCurrent(-amount);
      }
      prev = this._current;
      this._current = Math.max(this._current - amount, 0);
      if (this._strength > this._current) {
        this._strength = this._current;
      }
      return prev - this._current;
    };

    Energy.prototype.setCurrent = function(value) {
      var dif;

      dif = value - this._current;
      return this.incCurrent(dif);
    };

    Energy.prototype.incMax = function(amount) {
      if (amount < 0) {
        return -this.decMax(-amount);
      }
      this._max += amount;
      return amount;
    };

    Energy.prototype.decMax = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.incMax(-amount);
      }
      prev = this._max;
      this._max = Math.max(this._max - amount, 0);
      if (this._current > this._max) {
        this._current = this._max;
      }
      if (this._strength > this._current) {
        this._strength = this._current;
      }
      return prev - this._max;
    };

    Energy.prototype.setMax = function(value) {
      var dif;

      dif = value - this._max;
      return this.incMax(dif);
    };

    return Energy;

  })();

  BaseCharacter = (function() {
    BaseCharacter.prototype.body = null;

    BaseCharacter.prototype.energy = null;

    BaseCharacter.prototype.recover_rate = 0.0002;

    BaseCharacter.prototype.improve_rate = 0.1;

    BaseCharacter.prototype.power_up_rate = 0.001;

    BaseCharacter.prototype.power_down_rate = 0.004;

    BaseCharacter.prototype.fly_cost = 10;

    BaseCharacter.prototype.jump_str = 25;

    BaseCharacter.prototype.jump_cost_ratio = 0.1;

    BaseCharacter.prototype.max_vel = 15;

    BaseCharacter.prototype.fly_move_damp = 1;

    BaseCharacter.prototype.fly_not_move_damp = 10;

    BaseCharacter.prototype.ground_move_damp = 1;

    BaseCharacter.prototype.ground_not_move_damp = 10;

    BaseCharacter.prototype.not_ground_move_damp = 1;

    BaseCharacter.prototype.not_ground_not_move_damp = 2;

    BaseCharacter.prototype._stage = null;

    BaseCharacter.prototype._w = 0;

    BaseCharacter.prototype._h = 0;

    BaseCharacter.prototype._body_box = null;

    BaseCharacter.prototype._body_circle = null;

    BaseCharacter.prototype._move_direction = null;

    BaseCharacter.prototype._directions = {
      left: false,
      right: false,
      up: false,
      down: false
    };

    BaseCharacter.prototype._flying = false;

    BaseCharacter.prototype._jumping = false;

    BaseCharacter.prototype._blocking = false;

    BaseCharacter.prototype._power_up = 0;

    function BaseCharacter(universe, init_pos, type, click_callback) {
      this.universe = universe;
      this._stage = this.universe.game.game_stage;
      this._move_direction = new b2Vec2(0, 0);
      this.energy = new Energy(100);
    }

    BaseCharacter.prototype.update = function() {
      var anti_g, energy_spent, force, imp, jump_cost, moving, on_ground, pos, vel;

      energy_spent = 0;
      vel = this.body.GetLinearVelocity();
      pos = this.body.GetPosition();
      on_ground = this.onGround();
      moving = true;
      if (!this._blocking) {
        force = this._move_direction.Copy();
        force.Multiply(500);
        this.body.ApplyForce(force, pos);
        if (force.x === 0 && force.y === 0) {
          moving = false;
        }
      } else {
        moving = false;
      }
      jump_cost = this.jump_str * this.jump_cost_ratio;
      if (this._jumping && on_ground && this.energy.strength() > jump_cost) {
        moving = true;
        imp = new b2Vec2(0, -this.jump_str);
        this.body.ApplyImpulse(imp, pos);
        energy_spent += jump_cost;
      }
      if (Math.abs(vel.x) > this.max_vel) {
        vel.x = (vel.x > 0 ? 1 : -1) * this.max_vel;
        this.body.SetLinearVelocity(vel);
      }
      if (Math.abs(vel.y) > this.max_vel) {
        vel.y = (vel.y > 0 ? 1 : -1) * this.max_vel;
        this.body.SetLinearVelocity(vel);
      }
      this.body.SetAwake(true);
      if (this._flying) {
        if (this.energy.strength() > this.fly_cost) {
          anti_g = this.universe.world.GetGravity().Copy();
          anti_g.Multiply(-this.body.GetMass());
          this.body.ApplyForce(anti_g, pos);
          energy_spent += this.fly_cost;
        } else {
          this.endFly();
        }
      }
      if (on_ground) {
        if (moving) {
          this.body.SetLinearDamping(this.ground_move_damp);
        } else {
          this.body.SetLinearDamping(this.ground_not_move_damp);
        }
      } else if (this._flying) {
        if (moving) {
          this.body.SetLinearDamping(this.fly_move_damp);
        } else {
          this.body.SetLinearDamping(this.fly_not_move_damp);
        }
      } else {
        if (moving) {
          this.body.SetLinearDamping(this.not_ground_move_damp);
        } else {
          this.body.SetLinearDamping(this.not_ground_not_move_damp);
        }
      }
      return this._updateEnergy(energy_spent);
    };

    BaseCharacter.prototype.draw = function() {};

    BaseCharacter.prototype.position = function() {
      return this.body.GetPosition();
    };

    BaseCharacter.prototype.setPosition = function(pos) {
      return this.body.SetPosition(pos);
    };

    BaseCharacter.prototype.size = function() {};

    BaseCharacter.prototype.onGround = function() {
      var a, b, contact;

      contact = this.universe.world.GetContactList();
      while (contact) {
        a = contact.GetFixtureA();
        b = contact.GetFixtureB();
        if (contact.IsTouching() && (a === this._ground_sensor || b === this._ground_sensor)) {
          return true;
        }
        contact = contact.GetNext();
      }
      return false;
    };

    BaseCharacter.prototype.startUp = function() {
      this._jumping = true;
      if (this._flying) {
        this._directions.up = true;
        return this._move_direction.y = -1;
      }
    };

    BaseCharacter.prototype.endUp = function() {
      this._jumping = false;
      if (this._flying) {
        this._directions.up = false;
        if (this._directions.down) {
          return this._move_direction.y = 1;
        } else {
          return this._move_direction.y = 0;
        }
      }
    };

    BaseCharacter.prototype.startDown = function() {
      if (this._flying) {
        this._directions.down = true;
        return this._move_direction.y = 1;
      }
    };

    BaseCharacter.prototype.endDown = function() {
      if (this._flying) {
        this._directions.down = false;
        if (this._directions.up) {
          return this._move_direction.y = -1;
        } else {
          return this._move_direction.y = 0;
        }
      }
    };

    BaseCharacter.prototype.startFly = function() {
      if (this.energy.strength() >= this.fly_cost) {
        if (this._blocking) {
          this._stopMoveX();
          this._stopMoveY();
        }
        return this._flying = true;
      }
    };

    BaseCharacter.prototype.endFly = function() {
      this.endUp();
      this.endDown();
      return this._flying = false;
    };

    BaseCharacter.prototype.startRight = function() {
      this._directions.right = true;
      return this._move_direction.x = 1;
    };

    BaseCharacter.prototype.endRight = function() {
      this._directions.right = false;
      if (this._directions.left) {
        return this._move_direction.x = -1;
      } else {
        return this._move_direction.x = 0;
      }
    };

    BaseCharacter.prototype.startLeft = function() {
      this._directions.left = true;
      return this._move_direction.x = -1;
    };

    BaseCharacter.prototype.endLeft = function() {
      this._directions.left = false;
      this._move_direction.x = (this._directions.right ? 1 : 0);
      if (this._directions.right) {
        return this._move_direction.x = 1;
      } else {
        return this._move_direction.x = 0;
      }
    };

    BaseCharacter.prototype.startPowerUp = function() {
      return this._power_up = this.power_up_rate;
    };

    BaseCharacter.prototype.endPowerUp = function() {
      return this._power_up = 0;
    };

    BaseCharacter.prototype.startPowerDown = function() {
      return this._power_up = -this.power_down_rate;
    };

    BaseCharacter.prototype.endPowerDown = function() {
      return this._power_up = 0;
    };

    BaseCharacter.prototype.startBlock = function() {
      this._blocking = true;
      this._stopMoveX();
      return this._stopMoveY();
    };

    BaseCharacter.prototype.endBlock = function() {
      return this._blocking = false;
    };

    BaseCharacter.prototype.endAll = function() {
      this.endUp();
      this.endDown();
      this.endLeft();
      this.endRight();
      this.endPowerUp();
      this.endPowerDown();
      return this.endBlock();
    };

    BaseCharacter.prototype.recoverPercent = function(amount) {
      var current, target, _results;

      current = this.energy.current() / this.energy.max();
      target = Math.min(current + amount, 1);
      _results = [];
      while (current < target) {
        this._updateEnergy(0);
        _results.push(current = this.energy.current() / this.energy.max());
      }
      return _results;
    };

    BaseCharacter.prototype._stopMoveX = function() {
      var vel;

      vel = this.body.GetLinearVelocity();
      vel.x = 0;
      return this.body.SetLinearVelocity(vel);
    };

    BaseCharacter.prototype._stopMoveY = function() {
      var vel;

      vel = this.body.GetLinearVelocity();
      vel.y = 0;
      return this.body.SetLinearVelocity(vel);
    };

    BaseCharacter.prototype._positionSprite = function(sprite) {
      var pos;

      pos = this.universe.getDrawingPosWrapped(this.body.GetPosition());
      sprite.position.x = pos.x;
      sprite.position.y = pos.y;
      if (this._move_direction.x > 0) {
        return sprite.scale.x = 1;
      } else if (this._move_direction.x < 0) {
        return sprite.scale.x = -1;
      }
    };

    BaseCharacter.prototype._updateEnergy = function(spent) {
      var improve_amount, max, recover_amount, recovered_amount;

      max = this.energy.max();
      recover_amount = this.recover_rate * max - spent;
      recovered_amount = this.energy.incCurrent(recover_amount);
      if (recovered_amount > 0) {
        improve_amount = this.improve_rate * recovered_amount;
        this.energy.incMax(improve_amount);
      } else if (spent > 0 && recover_amount > 0) {
        improve_amount = this.improve_rate * recover_amount;
        this.energy.incMax(improve_amount);
      }
      return this.energy.incStrength(this._power_up * this.energy.max());
    };

    BaseCharacter.prototype._createBody = function(pos) {
      var bodyDef, box, circle, fixDef, h, offx, offy, v, w;

      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      this.body = this.universe.world.CreateBody(bodyDef);
      box = new b2Shapes.b2PolygonShape();
      box.SetAsBox(this._w, this._h);
      this._body_box = this.body.CreateFixture2(box, 5);
      circle = new b2Shapes.b2CircleShape(this._w + 0.01);
      circle.SetLocalPosition(new b2Vec2(0, this._h));
      this._body_circle = this.body.CreateFixture2(circle, 0);
      this._body_circle.SetRestitution(0);
      fixDef = new b2Dynamics.b2FixtureDef();
      w = this._w * 0.8;
      h = this._h * 0.1;
      offx = 0;
      offy = this._h + this._w;
      v = [new b2Vec2(-w + offx, -h + offy), new b2Vec2(w + offx, -h + offy), new b2Vec2(w + offx, h + offy), new b2Vec2(-w + offx, h + offy)];
      fixDef.shape = b2Shapes.b2PolygonShape.AsArray(v, 4);
      fixDef.density = 0;
      fixDef.isSensor = true;
      this._ground_sensor = this.body.CreateFixture(fixDef);
      this.body.SetBullet(true);
      this.body.SetFixedRotation(true);
      if (pos) {
        return this.body.SetPosition(pos);
      }
    };

    return BaseCharacter;

  })();

  Jackie = (function(_super) {
    __extends(Jackie, _super);

    Jackie.prototype.recover_rate = 0.0003;

    Jackie.prototype.improve_rate = 0.05;

    function Jackie(universe, init_pos, click_callback) {
      var _this = this;

      Jackie.__super__.constructor.call(this, universe, init_pos, click_callback);
      this.stand = PIXI.Sprite.fromFrame("jackie_stand_01");
      this.stand.anchor.x = .5;
      this.stand.anchor.y = .5;
      this._stage.addChild(this.stand);
      this.stand.setInteractive(true);
      this.stand.click = function(mousedata) {
        return click_callback(_this, mousedata);
      };
      this._w = .4;
      this._h = .5;
      this._offset = .1;
      this._createBody(init_pos);
    }

    Jackie.prototype.update = function() {
      return Jackie.__super__.update.call(this);
    };

    Jackie.prototype.draw = function() {
      return this._positionSprite(this.stand);
    };

    Jackie.prototype.size = function() {
      return {
        w: this.stand.width,
        h: this.stand.height
      };
    };

    return Jackie;

  })(BaseCharacter);

  Goku = (function(_super) {
    __extends(Goku, _super);

    Goku.prototype.recover_rate = 0.0002;

    Goku.prototype.improve_rate = 0.2;

    function Goku(universe, init_pos, click_callback) {
      var _this = this;

      Goku.__super__.constructor.call(this, universe, init_pos, click_callback);
      this._jump_str = 15;
      this.stand = PIXI.Sprite.fromFrame("goku_stand_01");
      this.stand.anchor.x = .5;
      this.stand.anchor.y = .5;
      this._stage.addChild(this.stand);
      this.stand.setInteractive(true);
      this.stand.click = function(mousedata) {
        return click_callback(_this, mousedata);
      };
      this._w = .3;
      this._h = .4;
      this._offset = 0;
      this._createBody(init_pos);
    }

    Goku.prototype.update = function() {
      return Goku.__super__.update.call(this);
    };

    Goku.prototype.draw = function() {
      return this._positionSprite(this.stand);
    };

    Goku.prototype.size = function() {
      return {
        w: this.stand.width,
        h: this.stand.height
      };
    };

    return Goku;

  })(BaseCharacter);

  Characters = (function() {
    function Characters() {}

    Characters.JACKIE = "Jackie";

    Characters.GOKU = "Goku";

    Characters.DEFAULT = "Defualt";

    Characters.TYPES = [Characters.DEFAULT, Characters.JACKIE, Characters.GOKU];

    Characters.newCharacter = function(universe, init_pos, type, click_callback) {
      var Char;

      Char = null;
      switch (type) {
        case this.JACKIE:
          Char = Jackie;
          break;
        case this.GOKU:
          Char = Goku;
      }
      return new Char(universe, init_pos, click_callback);
    };

    return Characters;

  })();

  DevGui = (function() {
    DevGui.prototype.enabled = false;

    DevGui.prototype.text = null;

    DevGui.prototype.new_text = null;

    DevGui.prototype.select_text = null;

    DevGui.prototype.control_text = null;

    DevGui.prototype.screen_x = 0;

    DevGui.prototype.screen_y = 0;

    DevGui.prototype.world_x = 0;

    DevGui.prototype.world_y = 0;

    DevGui.prototype.show_aabb = true;

    DevGui.prototype.show_center_of_mass = true;

    DevGui.prototype.show_controller = true;

    DevGui.prototype.show_joint = true;

    DevGui.prototype.show_pair = true;

    DevGui.prototype.show_shape = true;

    DevGui.prototype.new_char = false;

    DevGui.prototype.new_char_options = {
      pos: {
        x: 0,
        y: 0
      },
      type: Characters.GOKU,
      onclick: null
    };

    DevGui.prototype.selected_char = null;

    DevGui.prototype.sel_update_fn = null;

    DevGui.prototype.con_update_fn = null;

    function DevGui(game) {
      var style;

      this.game = game;
      this.onCharacterClick = __bind(this.onCharacterClick, this);
      this._onChangeNewChar = __bind(this._onChangeNewChar, this);
      style = {
        font: "15px Arial",
        fill: "#FFFFFF"
      };
      this.dev_text = new PIXI.Text("Dev-Mode", style);
      this.dev_text.position.x = 10;
      this.dev_text.position.y = 5;
      style = {
        font: "10px Arial",
        fill: "#FFFFFF"
      };
      this.new_text = new PIXI.Text("Click to spawn Character", style);
      this.select_text = new PIXI.Text("Selected", style);
      this.control_text = new PIXI.Text("Controlled", style);
      this.new_char_options.onclick = this.onCharacterClick;
    }

    DevGui.prototype.create = function() {
      this.gui = new dat.GUI();
      this.root_folder = this.gui.addFolder('Dev Controls');
      this.root_folder.open();
      this.root_folder.add(this, 'toggleDevMode');
      this._createMouseCoordsFolder();
      this._createGameFolder();
      return this._createCharacterFolder();
    };

    DevGui.prototype.remove = function() {
      return this.gui.destroy();
    };

    DevGui.prototype.update = function() {
      var c, pos, size, w;

      if (this.enabled) {
        if (this.selected_char) {
          pos = this.game.camera.worldToScreen(this.selected_char.position());
          size = this.selected_char.size();
          w = this.select_text.width;
          this.select_text.position.x = Math.round(pos.x - w / 2);
          this.select_text.position.y = Math.round(pos.y - size.h / 2 - 10);
          this.sel_update_fn();
        } else {
          this.select_text.position.x = -100;
          this.select_text.position.y = 0;
        }
        c = this.game.getControlledCharacter();
        if (c) {
          pos = this.game.camera.worldToScreen(c.position());
          size = c.size();
          w = this.control_text.width;
          this.control_text.position.x = Math.round(pos.x - w / 2);
          this.control_text.position.y = Math.round(pos.y - size.h / 2 - 10);
          return this.con_update_fn();
        } else {
          this.control_text.position.x = -100;
          return this.control_text.position.y = 0;
        }
      }
    };

    DevGui.prototype.toggleDevMode = function() {
      if (this.enabled) {
        this.game.stage.removeChild(this.dev_text);
        if (this.new_char) {
          this.game.stage.removeChild(this.new_text);
        }
        this.game.stage.removeChild(this.select_text);
        this.game.stage.removeChild(this.control_text);
        this.remove();
      } else {
        this.game.stage.addChild(this.dev_text);
        if (this.new_char) {
          this.game.stage.addChild(this.new_text);
        }
        this.game.stage.addChild(this.select_text);
        this.game.stage.addChild(this.control_text);
        this.create();
      }
      return this.enabled = !this.enabled;
    };

    DevGui.prototype.setMouseCoords = function(screen_x, screen_y, world_x, world_y) {
      this.screen_x = screen_x;
      this.screen_y = screen_y;
      this.world_x = world_x;
      this.world_y = world_y;
      this.new_char_options.pos.x = world_x;
      return this.new_char_options.pos.y = world_y;
    };

    DevGui.prototype._createMouseCoordsFolder = function() {
      var f;

      f = this.root_folder.addFolder("Mouse Coords");
      f.add(this, "screen_x").listen();
      f.add(this, "screen_y").listen();
      f.add(this, "world_x").listen();
      return f.add(this, "world_y").listen();
    };

    DevGui.prototype._createGameFolder = function() {
      var a, f, f2, onChange,
        _this = this;

      f = this.root_folder.addFolder("Game");
      f.open();
      f2 = f.addFolder("Debug Draw");
      f2.add(this.game.universe, "debug_draw_enabled");
      onChange = function(flag) {
        return function(value) {
          if (value) {
            return _this.game.universe.addDebugDrawFlag(flag);
          } else {
            return _this.game.universe.removeDebugDrawFlag(flag);
          }
        };
      };
      a = f2.add(this, 'show_aabb');
      a.onChange(onChange(this.game.universe.db_draw_flags.aabb));
      a = f2.add(this, 'show_center_of_mass');
      a.onChange(onChange(this.game.universe.db_draw_flags.center));
      a = f2.add(this, 'show_controller');
      a.onChange(onChange(this.game.universe.db_draw_flags.control));
      a = f2.add(this, 'show_joint');
      a.onChange(onChange(this.game.universe.db_draw_flags.joint));
      a = f2.add(this, 'show_pair');
      a.onChange(onChange(this.game.universe.db_draw_flags.pair));
      a = f2.add(this, 'show_shape');
      a.onChange(onChange(this.game.universe.db_draw_flags.shape));
      f.add(this.game, "paused");
      return f.add(this.game, "camera_attached");
    };

    DevGui.prototype._createCharacterFolder = function() {
      this.char_folder = this.root_folder.addFolder("Characters");
      this._createNewCharFolder();
      this._createSelCharFolder();
      return this._createConCharFolder();
    };

    DevGui.prototype._createNewCharFolder = function() {
      var a, f;

      f = this.char_folder.addFolder("New Character");
      a = f.add(this, 'new_char');
      a.onChange(this._onChangeNewChar);
      return f.add(this.new_char_options, 'type', Characters.TYPES);
    };

    DevGui.prototype._createSelCharFolder = function() {
      var char;

      char = this.selected_char;
      if (!char) {
        return;
      }
      if (this.sel_char_folder) {
        this._removeSelCharFolder();
      }
      this.sel_char_folder = this.char_folder.addFolder("Selected Character");
      this.sel_char_folder.add(this, "takeControl").listen();
      return this.sel_update_fn = this._fillCharFolder(char, this.sel_char_folder);
    };

    DevGui.prototype._removeSelCharFolder = function() {
      if (!this.sel_char_folder) {
        return;
      }
      this.char_folder.removeFolder(this.sel_char_folder);
      return this.sel_char_folder = void 0;
    };

    DevGui.prototype.restore25 = function() {
      var char;

      char = this.game.getControlledCharacter();
      return char.recoverPercent(.25);
    };

    DevGui.prototype._createConCharFolder = function() {
      var char;

      char = this.game.getControlledCharacter();
      if (!char) {
        return;
      }
      if (this.con_char_folder) {
        this._removeConCharFolder();
      }
      this.con_char_folder = this.char_folder.addFolder("Controlled Character");
      this.con_update_fn = this._fillCharFolder(char, this.con_char_folder);
      return this.con_char_folder.add(this, "restore25");
    };

    DevGui.prototype._removeConCharFolder = function() {
      if (!this.con_char_folder) {
        return;
      }
      this.char_folder.removeFolder(this.con_char_folder);
      return this.con_char_folder = void 0;
    };

    DevGui.prototype._fillCharFolder = function(char, f) {
      var df, ef, fn, pos;

      ef = f.addFolder("Energy");
      fn = this._fillEnergyFolder(char, ef);
      df = f.addFolder("Movment Damping");
      this._fillDampingFolder(char, df);
      pos = char.position();
      f.add(pos, "x").listen();
      f.add(pos, "y").listen();
      return fn;
    };

    DevGui.prototype._fillEnergyFolder = function(entity, f) {
      var energy, gui, updateCurrent, updateMax, updateStrength;

      energy = entity.energy;
      gui = {};
      gui.max = energy.max();
      gui.current = energy.current();
      gui.strength = energy.strength();
      gui.max_gui = null;
      gui.current_gui = null;
      gui.strength_gui = null;
      updateStrength = function() {
        gui.strength = energy.strength();
        return gui.strength_gui.updateDisplay();
      };
      updateCurrent = function() {
        gui.current = energy.current();
        gui.current_gui.updateDisplay();
        return updateStrength();
      };
      updateMax = function() {
        gui.max = energy.max();
        gui.max_gui.updateDisplay();
        return updateCurrent();
      };
      gui.max_gui = f.add(gui, "max").listen();
      gui.max_gui.onChange(function(value) {
        energy.setMax(value);
        return updateMax();
      });
      gui.current_gui = f.add(gui, "current").listen();
      gui.current_gui.onChange(function(value) {
        energy.setCurrent(value);
        return updateCurrent();
      });
      gui.strength_gui = f.add(gui, "strength").listen();
      gui.strength_gui.onChange(function(value) {
        energy.setStrength(value);
        return updateStrength();
      });
      return updateMax;
    };

    DevGui.prototype._fillDampingFolder = function(char, f) {
      f.add(char, "fly_move_damp");
      f.add(char, "fly_not_move_damp");
      f.add(char, "ground_move_damp");
      f.add(char, "ground_not_move_damp");
      f.add(char, "not_ground_move_damp");
      return f.add(char, "not_ground_not_move_damp");
    };

    DevGui.prototype._onChangeNewChar = function(value) {
      if (value) {
        return this.game.stage.addChild(this.new_text);
      } else {
        return this.game.stage.removeChild(this.new_text);
      }
    };

    DevGui.prototype._selectCharacter = function(character) {
      var c;

      c = this.game.getControlledCharacter();
      if (character === c || character === this.selected_char) {
        return;
      }
      this.selected_char = character;
      return this._createSelCharFolder();
    };

    DevGui.prototype.takeControl = function() {
      var c;

      if (this.selected_char) {
        c = this.game.getControlledCharacter();
        if (c) {
          c.endAll();
        }
        this.game.setControlledCharacter(this.selected_char);
        this._createConCharFolder();
        this._removeSelCharFolder();
        return this.selected_char = null;
      }
    };

    DevGui.prototype.onCharacterClick = function(character, mousedata) {
      if (this.enabled) {
        return this._selectCharacter(character);
      }
    };

    DevGui.prototype.onMouseDown = function(screen_pos) {
      if (this.new_char) {
        return this.game.spawnCharacter(this.new_char_options);
      }
    };

    DevGui.prototype.onMouseMove = function(screen_pos) {
      var h, w;

      w = this.game.camera.screenToWorld(screen_pos);
      this.setMouseCoords(screen_pos.x, screen_pos.y, w.x, w.y);
      if (this.new_char) {
        w = this.new_text.width;
        h = this.new_text.height;
        this.new_text.position.x = screen_pos.x - w / 2;
        return this.new_text.position.y = screen_pos.y - h;
      }
    };

    return DevGui;

  })();

  StarField = (function() {
    function StarField(camera, stage, star_count, min_depth, max_depth) {
      var i, pos, star, _i, _ref;

      this.camera = camera;
      this.stage = stage;
      this.star_count = star_count;
      this.min_depth = min_depth;
      this.max_depth = max_depth;
      this._g = new PIXI.Graphics();
      this.stage.addChild(this._g);
      this._stars = [];
      for (i = _i = 0, _ref = this.star_count; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        pos = {
          x: Math.random() * this.camera.w,
          y: Math.random() * this.camera.h
        };
        star = {
          x: pos.x,
          y: pos.y,
          z: (Math.random() * (this.min_depth - this.max_depth)) + this.max_depth
        };
        this._stars.push(star);
        this._prev_camera_pos = {
          x: this.camera.x,
          y: this.camera.y
        };
      }
    }

    StarField.prototype.clear = function() {
      return this._g.clear();
    };

    StarField.prototype.draw = function() {
      var dx, dy, r, s, star, _i, _len, _ref;

      dx = this.camera.x - this._prev_camera_pos.x;
      dy = this.camera.y - this._prev_camera_pos.y;
      if (dx > 5 || dx < -5) {
        dx = 0;
      }
      if (dy > 5 || dy < -5) {
        dy = 0;
      }
      _ref = this._stars;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        star = _ref[_i];
        r = star.z / (this.min_depth - this.max_depth);
        star.x -= dx - (dx * r);
        star.y -= dy - (dy * r);
        star.x = star.x % this.camera.w;
        star.y = star.y % this.camera.h;
        if (star.x < 0) {
          star.x += this.camera.w;
        }
        if (star.y < 0) {
          star.y += this.camera.h;
        }
        s = settings.STAR_MAX_SIZE - r * settings.STAR_MAX_SIZE;
        this._g.beginFill(0xFFFFFF);
        this._g.drawRect(Math.round(star.x), Math.round(star.y), s, s);
        this._g.endFill();
      }
      return this._prev_camera_pos = {
        x: this.camera.x,
        y: this.camera.y
      };
    };

    return StarField;

  })();

  boundedValue = function(value, min, max) {
    var v;

    v = value - min;
    if (v < 0) {
      v = max - v;
    } else {
      v = (v % (max - min)) + min;
    }
    return v;
  };

  DebugDraw = (function(_super) {
    __extends(DebugDraw, _super);

    function DebugDraw(camera) {
      this.camera = camera;
      this._line_width = 1;
      this._alpha = 0.5;
      this._fill_alpha = 0.5;
      this.m_sprite = {
        graphics: {
          clear: function() {}
        }
      };
    }

    DebugDraw.prototype.SetSprite = function(_graphics) {
      this._graphics = _graphics;
    };

    DebugDraw.prototype.GetSprite = function() {
      return this._graphics;
    };

    DebugDraw.prototype.DrawCircle = function(center, radius, color) {
      this._graphics.alpha = this._alpha;
      this._graphics.lineStyle(this._line_width, color.color);
      center = this.camera.worldToScreen(center);
      return this._graphics.drawCircle(center.x, center.y, radius * settings.PPM);
    };

    DebugDraw.prototype.DrawPolygon = function(vertices, vertexCount, color) {
      var v, v0, _i, _len, _ref;

      this._graphics.lineStyle(this._line_width, color.color);
      this._graphics.alpha = this._alpha;
      v0 = vertices[0];
      v0 = this.camera.worldToScreen(v0);
      this._graphics.moveTo(v0.x, v0.y);
      _ref = vertices.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v = this.camera.worldToScreen(v);
        this._graphics.lineTo(v.x, v.y);
      }
      return this._graphics.lineTo(v0.x, v0.y);
    };

    DebugDraw.prototype.DrawSegment = function(p1, p2, color) {
      this._graphics.lineStyle(this._line_width, color.color);
      this._graphics.alpha = this._alpha;
      p1 = this.camera.worldToScreen(p1);
      p2 = this.camera.worldToScreen(p2);
      this._graphics.moveTo(p1.x, p1.y);
      return this._graphics.lineTo(p2.x, p2.y);
    };

    DebugDraw.prototype.DrawSolidCircle = function(center, radius, axis, color) {
      var edge;

      this._graphics.beginFill(color.color);
      this._graphics.fillAlpha = this._fill_alpha;
      this.DrawCircle(center, radius, color);
      this._graphics.endFill();
      axis = axis.Copy();
      axis.Normalize();
      axis.Multiply(radius);
      edge = center.Copy();
      edge.Add(axis);
      return this.DrawSegment(center, edge, color);
    };

    DebugDraw.prototype.DrawSolidPolygon = function(vertices, vertexCount, color) {
      this._graphics.beginFill(color.color);
      this._graphics.fillAlpha = this._fill_alpha;
      this.DrawPolygon(vertices, vertexCount, color);
      return this._graphics.endFill();
    };

    DebugDraw.prototype.DrawTransform = function(xf) {
      var p1, p2, p3;

      this._graphics.lineStyle(this._line_width, 0xFF0000);
      this._graphics.alpha = this._alpha;
      p1 = this.camera.worldToScreen(xf.position);
      p2 = {
        x: xf.position.x + xf.R.col1.x,
        y: xf.position.y + xf.R.col1.y
      };
      p2 = this.camera.worldToScreen(p2);
      p3 = {
        x: xf.position.x + xf.R.col2.x,
        y: xf.position.y + xf.R.col2.y
      };
      p3 = this.camera.worldToScreen(p3);
      this._graphics.moveTo(p1.x, p1.y);
      this._graphics.lineTo(p2.x, p2.y);
      this._graphics.moveTo(p1.x, p1.y);
      return this._graphics.lineTo(p3.x, p3.y);
    };

    DebugDraw.prototype.GetAlpha = function() {
      return this._alpha;
    };

    DebugDraw.prototype.GetDrawScale = function() {
      return this._scale;
    };

    DebugDraw.prototype.GetFillAlpha = function() {
      return this._fill_alpha;
    };

    DebugDraw.prototype.GetLineThickness = function() {
      return this._line_width;
    };

    DebugDraw.prototype.SetAlpha = function(_alpha) {
      this._alpha = _alpha;
    };

    DebugDraw.prototype.SetDrawScale = function(_scale) {
      this._scale = _scale;
    };

    DebugDraw.prototype.SetLineThickness = function(_line_width) {
      this._line_width = _line_width;
    };

    return DebugDraw;

  })(b2Dynamics.b2DebugDraw);

  Planet = (function() {
    Planet.prototype.gravity = null;

    Planet.prototype.size = 100;

    Planet.prototype.depth = 10;

    Planet.prototype.terrain = [];

    Planet.prototype.characters = [];

    Planet.prototype._background = null;

    function Planet(universe, size) {
      this.universe = universe;
      this.size = size;
      this.size = this._getRoundedSize(this.size);
      this.gravity = new b2Vec2(0, this._getGravity(this.size));
      this.depth = this.size / (2 * Math.PI);
      this.world = this.universe.world;
      this._initTerrain();
      this._initBackground();
    }

    Planet.prototype.update = function() {};

    Planet.prototype.draw = function() {};

    Planet.prototype.getBounds = function() {
      return {
        x: -this.size / 2,
        y: -this.size * 2,
        w: this.size,
        h: this.size * 2 + this.depth
      };
    };

    Planet.prototype.load = function() {
      return this._loadTerrain();
    };

    Planet.prototype.unload = function() {
      return this._unloadTerrain();
    };

    Planet.prototype._initTerrain = function() {
      var cx, cy, h, w;

      w = this.size / 2;
      h = this.depth / 2;
      cx = 0;
      cy = h;
      return this.terrain = [
        [
          {
            x: cx - w,
            y: cy - h
          }, {
            x: cx + w,
            y: cy - h
          }, {
            x: cx + w,
            y: cy + h
          }, {
            x: cx - w,
            y: cy + h
          }
        ]
      ];
    };

    Planet.prototype._updateTerrainBody = function() {
      this._unloadTerrain();
      return this._loadTerrain();
    };

    Planet.prototype._loadTerrain = function() {
      var bodyDef, fixDef, poly, shape, v, _i, _j, _len, _len1, _ref, _results;

      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_staticBody;
      bodyDef.userData = "Terrain";
      fixDef = new b2Dynamics.b2FixtureDef();
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0;
      _ref = this.terrain;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        poly = _ref[_i];
        fixDef.shape = new b2Shapes.b2PolygonShape();
        shape = [];
        for (_j = 0, _len1 = poly.length; _j < _len1; _j++) {
          v = poly[_j];
          shape.push(new b2Vec2(v.x, v.y));
        }
        fixDef.shape.SetAsArray(shape, shape.length);
        _results.push(this.world.CreateBody(bodyDef).CreateFixture(fixDef));
      }
      return _results;
    };

    Planet.prototype._unloadTerrain = function() {
      var body, data, _results;

      body = this.world.GetBodyList();
      _results = [];
      while (body) {
        data = body.GetUserData();
        if (data && data === "Terrain") {
          this.world.DestroyBody(body);
        }
        _results.push(body = body.GetNext());
      }
      return _results;
    };

    Planet.prototype._initBackground = function() {
      return this._background = new PIXI.RenderTexture();
    };

    Planet.prototype._getGravity = function(size) {
      return size / 5;
    };

    Planet.prototype._getRoundedSize = function(size) {
      return size;
    };

    return Planet;

  })();

  Universe = (function() {
    Universe.prototype.planets = [];

    Universe.prototype.current_planet = null;

    Universe.prototype.characters = [];

    Universe.prototype.debug_draw_enabled = false;

    Universe.prototype._debug_drawer = null;

    Universe.prototype.db_draw_flags = {
      aabb: b2DebugDraw.e_aabbBit,
      center: b2DebugDraw.e_centerOfMassBit,
      control: b2DebugDraw.e_controllerBit,
      joint: b2DebugDraw.e_jointBit,
      pair: b2DebugDraw.e_pairBit,
      shape: b2DebugDraw.e_shapeBit
    };

    function Universe(game, graphics, camera) {
      var atm_tex, atm_w, bodyDef, doSleep, fixDef, gravity, w;

      this.game = game;
      this.graphics = graphics;
      this.camera = camera;
      gravity = new b2Vec2(0, 20);
      this.world = new b2Dynamics.b2World(gravity, doSleep = true);
      this.current_planet = new Planet(this, 100);
      this.current_planet.load();
      atm_tex = PIXI.Texture.fromImage("assets/img/atmosphere.png");
      w = {
        x: this.current_planet.size,
        y: 0
      };
      atm_w = this.camera.worldToScreenUnits(w).x + settings.WIDTH + 20;
      this._atm = new PIXI.TilingSprite(atm_tex, atm_w, atm_tex.height);
      this._atm.tilePosition.y = -1;
      this._atm_pos = {
        x: -atm_w / 2,
        y: 0
      };
      this._atm_pos = this.camera.screenToWorldUnits(this._atm_pos);
      this._atm.position.x = this._atm_pos.x;
      this._atm.position.y = this._atm_pos.y;
      this._atm.anchor.x = 0;
      this._atm.anchor.y = 1;
      this.game.bg_stage.addChild(this._atm);
      this._debug_drawer = new DebugDraw(this.camera);
      this._debug_drawer.SetSprite(this.graphics);
      this._debug_drawer.SetDrawScale(1);
      this._debug_drawer.SetAlpha(1);
      this._debug_drawer.SetFillAlpha(1);
      this._debug_drawer.SetLineThickness(1.0);
      this._debug_drawer.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit | b2DebugDraw.e_centerOfMassBit | b2DebugDraw.e_controllerBit | b2DebugDraw.e_pairBit | b2DebugDraw.e_aabbBit);
      this.world.SetDebugDraw(this._debug_drawer);
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      bodyDef.position.x = 0;
      bodyDef.position.y = -10;
      fixDef = new b2Dynamics.b2FixtureDef();
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.2;
      fixDef.shape = new b2Shapes.b2CircleShape(1);
      this.world.CreateBody(bodyDef).CreateFixture(fixDef);
      bodyDef.position.x = 10;
      bodyDef.position.y = -10;
      fixDef.density = 2.0;
      fixDef.friction = 0.7;
      fixDef.restitution = 0.2;
      fixDef.shape = new b2Shapes.b2PolygonShape();
      fixDef.shape.SetAsBox(2, 2);
      this.world.CreateBody(bodyDef).CreateFixture(fixDef);
    }

    Universe.prototype.update = function() {
      var c, _i, _len, _ref;

      _ref = this.characters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.update();
      }
      this._wrapObjects();
      this.world.Step(settings.BOX2D_TIME_STEP, settings.BOX2D_VI, settings.BOX2D_PI);
      return this.world.ClearForces();
    };

    Universe.prototype._wrapObjects = function() {
      var body, new_camera_pos, new_pos;

      body = this.world.GetBodyList();
      while (body) {
        new_pos = this.boundedPoint(body.GetPosition());
        body.SetPosition(new b2Vec2(new_pos.x, new_pos.y));
        body = body.GetNext();
      }
      new_camera_pos = this.boundedPoint(this.camera);
      this.camera.x = new_camera_pos.x;
      return this.camera.y = new_camera_pos.y;
    };

    Universe.prototype.draw = function() {
      var atm_screen, c, _i, _len, _ref;

      atm_screen = this.camera.worldToScreen(this._atm_pos);
      this._atm.position.x = atm_screen.x;
      this._atm.position.y = atm_screen.y;
      _ref = this.characters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.draw();
      }
      if (this.debug_draw_enabled) {
        return this.world.DrawDebugData();
      }
    };

    Universe.prototype.getDrawingPosWrapped = function(pos, bounds) {
      var alt_pos, alt_x, alt_y, dist, max_x, max_y, min_dist, min_x, min_y, p, screen_alt_pos, screen_pos, _i, _len;

      screen_pos = this.camera.worldToScreen(pos);
      if (this.camera.onScreen(screen_pos)) {
        return screen_pos;
      }
      if (!bounds) {
        bounds = this.getBounds();
      }
      min_x = bounds.x - bounds.w / 2;
      max_x = min_x + bounds.w * 2;
      min_y = bounds.y - bounds.h / 2;
      max_y = min_y + bounds.h * 2;
      alt_x = boundedValue(pos.x + bounds.w, min_x, max_x);
      alt_y = boundedValue(pos.y + bounds.h, min_y, max_y);
      alt_pos = [
        {
          x: alt_x,
          y: pos.y
        }, {
          x: pos.x,
          y: alt_y
        }, {
          x: alt_x,
          y: alt_y
        }, pos
      ];
      screen_alt_pos = null;
      min_dist = null;
      for (_i = 0, _len = alt_pos.length; _i < _len; _i++) {
        pos = alt_pos[_i];
        p = this.camera.worldToScreen(pos);
        dist = Math.abs(p.x - this.camera.w / 2) + Math.abs(p.y - this.camera.h / 2);
        if (min_dist === null || dist < min_dist) {
          screen_alt_pos = p;
          min_dist = dist;
        }
      }
      return screen_alt_pos;
    };

    Universe.prototype.getBounds = function() {
      return this.current_planet.getBounds();
    };

    Universe.prototype.boundedPoint = function(point, bounds) {
      var x, y;

      if (!bounds) {
        bounds = this.getBounds();
      }
      x = boundedValue(point.x, bounds.x, bounds.x + bounds.w);
      y = boundedValue(point.y, bounds.y, bounds.y + bounds.h);
      return {
        x: x,
        y: y
      };
    };

    Universe.prototype.addDebugDrawFlag = function(flag) {
      var flags;

      flags = this._debug_drawer.GetFlags();
      flags = flags | flag;
      return this._debug_drawer.SetFlags(flags);
    };

    Universe.prototype.removeDebugDrawFlag = function(flag) {
      var flags;

      flags = this._debug_drawer.GetFlags();
      flags = flags - flag;
      return this._debug_drawer.SetFlags(flags);
    };

    Universe.prototype.newCharacter = function(options) {
      var callback, character, pos, type, _ref, _ref1, _ref2;

      options = options != null ? options : {};
      options.pos = (_ref = options.pos) != null ? _ref : {
        x: 0,
        y: 0
      };
      type = (_ref1 = options.type) != null ? _ref1 : "Goku";
      callback = (_ref2 = options.onclick) != null ? _ref2 : function() {};
      pos = new b2Vec2(options.pos.x, options.pos.y);
      character = Characters.newCharacter(this, pos, type, callback);
      this.characters.push(character);
      return character;
    };

    return Universe;

  })();

  Game = (function() {
    Game.prototype.camera = null;

    Game.prototype.paused = false;

    Game.prototype.camera_attached = true;

    Game.prototype.universe = null;

    Game.prototype._last_mouse_pos = {
      x: 0,
      y: 0
    };

    Game.prototype._mouse_down = false;

    Game.prototype._starfield = null;

    Game.prototype._controlled_char = null;

    Game.prototype._max_text = null;

    Game.prototype._current_text = null;

    Game.prototype._strength_text = null;

    Game.prototype._new_char_options = {
      pos: {
        x: 0,
        y: 0
      },
      type: Characters.GOKU,
      onclick: null
    };

    Game.prototype._dev_gui = null;

    function Game(stage) {
      var style;

      this.stage = stage;
      this.hud_stage = new PIXI.DisplayObjectContainer();
      this.game_stage = new PIXI.DisplayObjectContainer();
      this.debug_stage = new PIXI.DisplayObjectContainer();
      this.bg_stage = new PIXI.DisplayObjectContainer();
      this.stage.addChild(this.bg_stage);
      this.stage.addChild(this.game_stage);
      this.stage.addChild(this.hud_stage);
      this.stage.addChild(this.debug_stage);
      this.debug_graphics = new PIXI.Graphics();
      this.hud_graphics = new PIXI.Graphics();
      this.debug_stage.addChild(this.debug_graphics);
      this.hud_stage.addChild(this.hud_graphics);
      this.camera = new Camera(0, 0, settings.WIDTH, settings.HEIGHT);
      this._starfield = new StarField(this.camera, this.bg_stage, settings.STAR_COUNT, settings.STAR_MIN_DEPTH, settings.STAR_MAX_DEPTH);
      this.universe = new Universe(this, this.debug_graphics, this.camera);
      this._dev_gui = new DevGui(this);
      this._new_char_options.pos.x = -8;
      this._new_char_options.pos.y = -10;
      this._new_char_options.type = Characters.JACKIE;
      this._new_char_options.onclick = this._dev_gui.onCharacterClick;
      this.spawnCharacter(this._new_char_options);
      this._controlled_char = this.universe.characters[0];
      style = {
        font: "" + settings.ENERGY_BAR.text.size + "px Arial",
        fill: "#FFFFFF"
      };
      this._max_text = new PIXI.Text("0", style);
      this.stage.addChild(this._max_text);
      this._current_text = new PIXI.Text("0", style);
      this.stage.addChild(this._current_text);
      this._strength_text = new PIXI.Text("0", style);
      this.stage.addChild(this._strength_text);
      if (settings.DEBUG && !this._dev_gui.enabled) {
        this._dev_gui.toggleDevMode();
      }
    }

    Game.prototype.update = function() {
      var pos;

      if (!this.paused) {
        this.universe.update();
      }
      if (this.camera_attached && this._controlled_char) {
        pos = this._controlled_char.position();
        this.camera.x = pos.x;
        this.camera.y = pos.y;
      }
      return this._dev_gui.update();
    };

    Game.prototype.clear = function() {
      this.debug_graphics.clear();
      this.hud_graphics.clear();
      return this._starfield.clear();
    };

    Game.prototype.draw = function() {
      this._starfield.draw();
      this.universe.draw();
      return this._drawEnergyBar();
    };

    Game.prototype._drawEnergyBar = function() {
      var energy, max_bar, pad, width;

      if (!this._controlled_char) {
        return;
      }
      energy = this._controlled_char.energy;
      this.hud_graphics.lineStyle(1, 0xBB0000);
      this.hud_graphics.beginFill(0xFF0000);
      this.hud_graphics.fillAlpha = 0.4;
      max_bar = settings.ENERGY_BAR;
      this.hud_graphics.drawRect(max_bar.x, max_bar.y, max_bar.width, max_bar.height);
      this.hud_graphics.endFill();
      pad = settings.ENERGY_BAR.text.pad;
      this._max_text.setText("" + Math.round(energy.max()));
      this._max_text.position.x = max_bar.x + max_bar.width - this._max_text.width - pad;
      this._max_text.position.y = max_bar.y + pad;
      this.hud_graphics.lineStyle(1, 0x00BB00);
      this.hud_graphics.beginFill(0x00FF00);
      this.hud_graphics.fillAlpha = 0.4;
      if (energy.max() === 0) {
        width = 1;
      } else {
        width = Math.max((energy.current() / energy.max()) * max_bar.width, 1);
      }
      this.hud_graphics.drawRect(max_bar.x, max_bar.y, width, max_bar.height);
      this.hud_graphics.endFill();
      this._current_text.setText("" + Math.round(energy.current()));
      this._current_text.position.x = max_bar.x + width - this._current_text.width - pad;
      this._current_text.position.y = this._max_text.position.y + this._max_text.height + pad;
      this.hud_graphics.lineStyle(1, 0x0000BB);
      this.hud_graphics.beginFill(0x0000FF);
      this.hud_graphics.fillAlpha = 0.4;
      if (energy.max() === 0) {
        width = 1;
      } else {
        width = Math.max((energy.strength() / energy.max()) * max_bar.width, 1);
      }
      this.hud_graphics.drawRect(max_bar.x, max_bar.y, width, max_bar.height);
      this.hud_graphics.endFill();
      this._strength_text.setText("" + Math.round(energy.strength()));
      this._strength_text.position.x = max_bar.x + width - this._strength_text.width - pad;
      return this._strength_text.position.y = this._current_text.position.y + this._current_text.height + pad;
    };

    Game.prototype.toggleDevMode = function() {
      return this._dev_gui.toggleDevMode();
    };

    Game.prototype.getControlledCharacter = function() {
      return this._controlled_char;
    };

    Game.prototype.setControlledCharacter = function(char) {
      return this._controlled_char = char;
    };

    Game.prototype.spawnCharacter = function(options) {
      var c;

      return c = this.universe.newCharacter(options);
    };

    Game.prototype.onKeyDown = function(key_code) {
      if (this._controlled_char) {
        switch (key_code) {
          case settings.BINDINGS.LEFT:
            return this._controlled_char.startLeft();
          case settings.BINDINGS.RIGHT:
            return this._controlled_char.startRight();
          case settings.BINDINGS.UP:
            return this._controlled_char.startUp();
          case settings.BINDINGS.DOWN:
            return this._controlled_char.startDown();
          case settings.BINDINGS.POWER_UP:
            return this._controlled_char.startPowerUp();
          case settings.BINDINGS.POWER_DOWN:
            return this._controlled_char.startPowerDown();
          case settings.BINDINGS.FLY:
            return this._controlled_char.startFly();
          case settings.BINDINGS.BLOCK:
            return this._controlled_char.startBlock();
        }
      }
    };

    Game.prototype.onKeyUp = function(key_code) {
      if (this._controlled_char) {
        switch (key_code) {
          case settings.BINDINGS.LEFT:
            return this._controlled_char.endLeft();
          case settings.BINDINGS.RIGHT:
            return this._controlled_char.endRight();
          case settings.BINDINGS.UP:
            return this._controlled_char.endUp();
          case settings.BINDINGS.DOWN:
            return this._controlled_char.endDown();
          case settings.BINDINGS.POWER_UP:
            return this._controlled_char.endPowerUp();
          case settings.BINDINGS.POWER_DOWN:
            return this._controlled_char.endPowerDown();
          case settings.BINDINGS.FLY:
            return this._controlled_char.endFly();
          case settings.BINDINGS.BLOCK:
            return this._controlled_char.endBlock();
        }
      }
    };

    Game.prototype.onMouseDown = function(screen_pos) {
      this._mouse_down = true;
      return this._dev_gui.onMouseDown(screen_pos);
    };

    Game.prototype.onMouseUp = function(screen_pos) {
      return this._mouse_down = false;
    };

    Game.prototype.onMouseMove = function(screen_pos) {
      var dp;

      if (this._mouse_down && this._dev_gui.enabled) {
        dp = {
          x: screen_pos.x - this._last_mouse_pos.x,
          y: screen_pos.y - this._last_mouse_pos.y
        };
        dp = this.camera.screenToWorldUnits(dp);
        this.camera.x -= dp.x;
        this.camera.y -= dp.y;
      }
      this._last_mouse_pos = screen_pos;
      return this._dev_gui.onMouseMove(screen_pos);
    };

    Game.prototype.onMouseWheel = function(delta) {};

    return Game;

  })();

  $(function() {
    var DOM_LOADED, assets, loader;

    DOM_LOADED = true;
    assets = ["assets/img/jackie_chun.json", "assets/img/goku.json", "assets/img/atmosphere.png"];
    loader = new PIXI.AssetLoader(assets);
    loader.onComplete = main;
    return loader.load();
  });

  W = 0;

  H = 0;

  stance = null;

  main = function() {
    var black, blurHandler, body, canvas, clear, clickHandler, container, draw, event_catcher, focusHandler, game, keyDownListener, keyUpListener, main_loop, mouseDownHandler, mouseMoveHandler, mouseOutHandler, mouseUpHandler, mouseWheelHandler, onBeforeUnload, onResize, queue, renderer, stage, update;

    W = settings.FULL_SCREEN ? window.innerWidth : settings.WIDTH;
    H = settings.FULL_SCREEN ? window.innerHeight : settings.HEIGHT;
    body = $('body');
    container = $('<div>');
    container.css('margin-right', 'auto');
    container.css('margin-left', 'auto');
    container.css('width', "" + W + "px");
    body.append(container);
    black = 0x000000;
    stage = new PIXI.Stage(black);
    renderer = PIXI.autoDetectRenderer(W, H);
    container.append(renderer.view);
    canvas = $('canvas')[0];
    game = new Game(stage);
    onResize = function() {
      return log_input("resize");
    };
    keyDownListener = function(e) {
      log_input("key down:", e.keyCode);
      if (e.keyCode === 192) {
        game.toggleDevMode();
      }
      return game.onKeyDown(e.keyCode);
    };
    keyUpListener = function(e) {
      log_input("key up:", e.keyCode);
      return game.onKeyUp(e.keyCode);
    };
    onBeforeUnload = function(e) {
      return log_input("leaving");
    };
    mouseMoveHandler = function(e) {
      var x, y;

      x = e.layerX;
      y = e.layerY;
      log_input("mouse:", x, y);
      return game.onMouseMove({
        x: x,
        y: y
      });
    };
    clickHandler = function(e) {
      var x, y;

      x = e.layerX;
      y = e.layerY;
      return log_input("click:", x, y);
    };
    mouseDownHandler = function(e) {
      var x, y;

      log_input("mouse down");
      x = e.layerX;
      y = e.layerY;
      return game.onMouseDown({
        x: x,
        y: y
      });
    };
    mouseUpHandler = function(e) {
      var x, y;

      log_input("mouse up");
      x = e.layerX;
      y = e.layerY;
      return game.onMouseUp({
        x: x,
        y: y
      });
    };
    mouseOutHandler = function(e) {
      return log_input("mouse out");
    };
    mouseWheelHandler = function(e) {
      var delta;

      delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail));
      return log_input("mouse wheel: ", delta);
    };
    focusHandler = function(e) {
      return log_input("focus");
    };
    blurHandler = function(e) {
      return log_input("blur");
    };
    event_catcher = canvas;
    window.onresize = onResize;
    document.body.addEventListener('keydown', keyDownListener, false);
    document.body.addEventListener('keyup', keyUpListener, false);
    window.onbeforeunload = onBeforeUnload;
    event_catcher.addEventListener('mousemove', mouseMoveHandler, false);
    event_catcher.addEventListener('click', clickHandler, false);
    event_catcher.addEventListener('mousedown', mouseDownHandler, false);
    event_catcher.addEventListener('mouseup', mouseUpHandler, false);
    event_catcher.addEventListener('mouseout', mouseOutHandler, false);
    event_catcher.addEventListener('DOMMouseScroll', mouseWheelHandler, false);
    event_catcher.addEventListener('mousewheel', mouseWheelHandler, false);
    event_catcher.addEventListener('focus', focusHandler, false);
    event_catcher.addEventListener('blur', blurHandler, false);
    main_loop = function() {
      update();
      clear();
      draw();
      return queue();
    };
    update = function() {
      return game.update();
    };
    clear = function() {
      return game.clear();
    };
    draw = function() {
      game.draw();
      return renderer.render(stage);
    };
    queue = function() {
      return window.requestAnimationFrame(main_loop);
    };
    return main_loop();
  };

  log_input = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (settings.PRINT_INPUT) {
      return console.log.apply(console, args);
    }
  };

  ParticleSystem = (function() {
    function ParticleSystem(max_particles, update_fn, draw_fn) {
      this.max_particles = max_particles;
      this.update_fn = update_fn;
      this.draw_fn = draw_fn;
      this.particles = [];
      this.emitters = [];
      this.fields = [];
    }

    ParticleSystem.prototype.update = function() {
      var e, p, _i, _j, _len, _len1, _ref, _ref1, _results;

      _ref = this.emitters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        this._emit(e);
      }
      _ref1 = this.particles;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        _results.push(this._updateParticle(p));
      }
      return _results;
    };

    ParticleSystem.prototype.draw = function() {
      var p, _i, _len, _ref, _results;

      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(this.draw_fn(p));
      }
      return _results;
    };

    ParticleSystem.prototype.addEmitter = function(emitter) {
      return this.emitters.push(emitter);
    };

    ParticleSystem.prototype.addField = function(field) {
      return this.fields.push(field);
    };

    ParticleSystem.prototype.removeEmitter = function(emitter) {
      return this.emitters = this.emitters.filter(function(e) {
        return e !== emitter;
      });
    };

    ParticleSystem.prototype.removeField = function(field) {
      return this.fields = this.fields.filter(function(f) {
        return f !== field;
      });
    };

    ParticleSystem.prototype._addParticle = function(particle) {
      if (this.particles.length < this.max_particles) {
        return this.particles.push(particle);
      }
    };

    ParticleSystem.prototype._emit = function(e) {
      var i, _i, _ref, _results;

      if (!e.active) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = e.rate; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this._addParticle(e.particle_fn()));
      }
      return _results;
    };

    ParticleSystem.prototype._updateParticle = function(p) {
      var dir_x, dir_y, f, field_acl, force, _i, _len, _ref;

      field_acl = {
        x: 0,
        y: 0
      };
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        dir_x = f.pos.x - p.pos.x;
        dir_y = f.pos.y - p.pos.y;
        force = f.strength / Math.pow(dir_x * dir_x + dir_y * dir_y, 1.5);
        field_acl.x += dir_x * force;
        field_acl.y += dir_y * force;
      }
      this.update_fn(p, field_acl);
      p.life--;
      if (p.life <= 0) {
        return this.particles = this.particles.filter(function(par) {
          return par !== p;
        });
      }
    };

    return ParticleSystem;

  })();

}).call(this);
