// Generated by CoffeeScript 1.6.2
(function() {
  var Camera, Character, DebugDraw, Game, H, ParticleSystem, Planet, Universe, W, b2Collision, b2Common, b2Contacts, b2Controllers, b2Dynamics, b2Joints, b2Math, b2Shapes, b2Vec2, log_input, main, settings, stance,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  settings = {
    DEBUG: true,
    PRINT_INPUT: false,
    FULL_SCREEN: false,
    WIDTH: 900,
    HEIGHT: 600,
    PPM: 30,
    BOX2D_TIME_STEP: 1 / 60,
    BOX2D_VI: 10,
    BOX2D_PI: 10
  };

  b2Common = Box2D.Common;

  b2Math = Box2D.Common.Math;

  b2Vec2 = b2Math.b2Vec2;

  b2Collision = Box2D.Collision;

  b2Shapes = Box2D.Collision.Shapes;

  b2Dynamics = Box2D.Dynamics;

  b2Contacts = Box2D.Dynamics.Contacts;

  b2Controllers = Box2D.Dynamics.Controllers;

  b2Joints = Box2D.Dynamics.Joints;

  DebugDraw = (function(_super) {
    __extends(DebugDraw, _super);

    function DebugDraw(camera) {
      this.camera = camera;
      this._line_width = 1;
      this._alpha = 0.5;
      this._fill_alpha = 0.5;
      this.m_sprite = {
        graphics: {
          clear: function() {}
        }
      };
    }

    DebugDraw.prototype.SetSprite = function(_graphics) {
      this._graphics = _graphics;
    };

    DebugDraw.prototype.GetSprite = function() {
      return this._graphics;
    };

    DebugDraw.prototype.DrawCircle = function(center, radius, color) {
      this._graphics.alpha = this._alpha;
      this._graphics.lineStyle(this._line_width, color.color);
      center = this.camera.worldToScreen(center);
      return this._graphics.drawCircle(center.x, center.y, radius * settings.PPM);
    };

    DebugDraw.prototype.DrawPolygon = function(vertices, vertexCount, color) {
      var v, v0, _i, _len, _ref;

      this._graphics.lineStyle(this._line_width, color.color);
      this._graphics.alpha = this._alpha;
      v0 = vertices[0];
      v0 = this.camera.worldToScreen(v0);
      this._graphics.moveTo(v0.x, v0.y);
      _ref = vertices.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v = this.camera.worldToScreen(v);
        this._graphics.lineTo(v.x, v.y);
      }
      return this._graphics.lineTo(v0.x, v0.y);
    };

    DebugDraw.prototype.DrawSegment = function(p1, p2, color) {
      this._graphics.lineStyle(this._line_width, color.color);
      this._graphics.alpha = this._alpha;
      p1 = this.camera.worldToScreen(p1);
      p2 = this.camera.worldToScreen(p2);
      this._graphics.moveTo(p1.x, p1.y);
      return this._graphics.lineTo(p2.x, p2.y);
    };

    DebugDraw.prototype.DrawSolidCircle = function(center, radius, axis, color) {
      var edge;

      this._graphics.beginFill(color.color);
      this._graphics.fillAlpha = this._fill_alpha;
      this.DrawCircle(center, radius, color);
      this._graphics.endFill();
      axis.Normalize();
      axis.Multiply(radius);
      edge = center.Copy();
      edge.Add(axis);
      return this.DrawSegment(center, edge, color);
    };

    DebugDraw.prototype.DrawSolidPolygon = function(vertices, vertexCount, color) {
      this._graphics.beginFill(color.color);
      this._graphics.fillAlpha = this._fill_alpha;
      this.DrawPolygon(vertices, vertexCount, color);
      return this._graphics.endFill();
    };

    DebugDraw.prototype.GetAlpha = function() {
      return this._alpha;
    };

    DebugDraw.prototype.GetDrawScale = function() {
      return this._scale;
    };

    DebugDraw.prototype.GetFillAlpha = function() {
      return this._fill_alpha;
    };

    DebugDraw.prototype.GetLineThickness = function() {
      return this._line_width;
    };

    DebugDraw.prototype.SetAlpha = function(_alpha) {
      this._alpha = _alpha;
    };

    DebugDraw.prototype.SetDrawScale = function(_scale) {
      this._scale = _scale;
    };

    DebugDraw.prototype.SetLineThickness = function(_line_width) {
      this._line_width = _line_width;
    };

    return DebugDraw;

  })(b2Dynamics.b2DebugDraw);

  Character = (function() {
    Character.prototype.MAX_VEL = 15;

    function Character(universe, init_pos) {
      var bodyDef, box, circle;

      this.universe = universe;
      this.stand = PIXI.Sprite.fromFrame("jackie_stand_01");
      this.stand.anchor.x = .5;
      this.stand.anchor.y = .5;
      this.universe.game.stage.addChildAt(this.stand, 0);
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      this.body = this.universe.world.CreateBody(bodyDef);
      this._w = .4;
      this._h = .5;
      circle = new b2Shapes.b2CircleShape(this._w);
      circle.SetLocalPosition(new b2Vec2(0, this._h));
      this.body_circle = this.body.CreateFixture2(circle, 0);
      this.body_circle.SetRestitution(0);
      box = new b2Shapes.b2PolygonShape();
      box.SetAsBox(this._w, this._h);
      this.body_box = this.body.CreateFixture2(box, 5);
      this.body.SetBullet(true);
      this.body.SetFixedRotation(true);
      this.body.SetPosition(init_pos);
      this._move_direction = new b2Vec2(0, 0);
      this._directions = {
        left: false,
        right: false,
        up: false,
        down: false
      };
      this._jumping = false;
    }

    Character.prototype.update = function() {
      var force, imp, pos, vel;

      vel = this.body.GetLinearVelocity();
      pos = this.body.GetPosition();
      force = this._move_direction.Copy();
      force.Multiply(500);
      this.body.ApplyForce(force, pos);
      if (this._jumping && this.onGround()) {
        imp = new b2Vec2(0, -25);
        this.body.ApplyImpulse(imp, pos);
      }
      if (Math.abs(vel.x) > this.MAX_VEL) {
        vel.x = (vel.x > 0 ? 1 : -1) * this.MAX_VEL;
        this.body.SetLinearVelocity(vel);
      }
      return this.body.SetAwake(true);
    };

    Character.prototype.draw = function() {
      var pos;

      pos = this.body.GetPosition();
      pos = {
        x: pos.x,
        y: pos.y + .1
      };
      pos = this.universe.game.camera.worldToScreen(pos);
      this.stand.position.x = pos.x;
      return this.stand.position.y = pos.y;
    };

    Character.prototype.position = function() {
      return this.body.GetPosition();
    };

    Character.prototype.size = function() {
      return {
        w: this.stand.width,
        h: this.stand.height
      };
    };

    Character.prototype.onGround = function() {
      var a, b, below, contact, manifold, p, pos, _i, _len, _ref;

      contact = this.universe.world.GetContactList();
      while (contact) {
        a = contact.GetFixtureA();
        b = contact.GetFixtureB();
        if (contact.IsTouching() && (a === this.body_circle || b === this.body_circle)) {
          pos = this.body.GetPosition();
          manifold = new b2Collision.b2WorldManifold();
          contact.GetWorldManifold(manifold);
          below = true;
          _ref = manifold.m_points;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            below &= p.y > (pos.y + this._h + .1);
          }
          return below;
        }
        contact = contact.GetNext();
      }
      return false;
    };

    Character.prototype.startJump = function() {
      return this._jumping = true;
    };

    Character.prototype.endJump = function() {
      return this._jumping = false;
    };

    Character.prototype.startMoveRight = function() {
      this._directions.right = true;
      return this._move_direction.x = 1;
    };

    Character.prototype.endMoveRight = function() {
      this._directions.right = false;
      if (this._directions.left) {
        return this._move_direction.x = -1;
      } else {
        this._move_direction.x = 0;
        return this._stopMoveX();
      }
    };

    Character.prototype.startMoveLeft = function() {
      this._directions.left = true;
      return this._move_direction.x = -1;
    };

    Character.prototype.endMoveLeft = function() {
      this._directions.left = false;
      this._move_direction.x = (this._directions.right ? 1 : 0);
      if (this._directions.right) {
        return this._move_direction.x = 1;
      } else {
        this._move_direction.x = 0;
        return this._stopMoveX();
      }
    };

    Character.prototype._stopMoveX = function() {
      var vel;

      vel = this.body.GetLinearVelocity();
      vel.x = 0;
      return this.body.SetLinearVelocity(vel);
    };

    return Character;

  })();

  Universe = (function() {
    Universe.prototype.planets = [];

    Universe.prototype.characters = [];

    Universe.prototype._debug_draw = false;

    Universe.prototype._debug_drawer = null;

    function Universe(game, graphics, camera) {
      var bodyDef, doSleep, fixDef, gravity;

      this.game = game;
      this.graphics = graphics;
      this.camera = camera;
      gravity = new b2Vec2(0, 20);
      this.world = new b2Dynamics.b2World(gravity, doSleep = true);
      this._debug_drawer = new DebugDraw(this.camera);
      this._debug_drawer.SetSprite(this.graphics);
      this._debug_drawer.SetDrawScale(1);
      this._debug_drawer.SetFillAlpha(0.3);
      this._debug_drawer.SetLineThickness(1.0);
      this._debug_drawer.SetFlags(b2Dynamics.b2DebugDraw.e_shapeBit | b2Dynamics.b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(this._debug_drawer);
      this._terrain = [];
      this._createTerrain();
      this._updateTerrainBody();
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      bodyDef.position.x = 0;
      bodyDef.position.y = -10;
      fixDef = new b2Dynamics.b2FixtureDef();
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.2;
      fixDef.shape = new b2Shapes.b2CircleShape(1);
      this.world.CreateBody(bodyDef).CreateFixture(fixDef);
    }

    Universe.prototype.update = function() {
      var c, _i, _len, _ref;

      _ref = this.characters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.update();
      }
      this.world.Step(settings.BOX2D_TIME_STEP, settings.BOX2D_VI, settings.BOX2D_PI);
      return this.world.ClearForces();
    };

    Universe.prototype.draw = function() {
      var c, _i, _len, _ref;

      _ref = this.characters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.draw();
      }
      if (this._debug_draw) {
        return this.world.DrawDebugData();
      }
    };

    Universe.prototype.toggleDebugDraw = function() {
      return this._debug_draw = !this._debug_draw;
    };

    Universe.prototype.newCharacter = function(options) {
      var character, pos, _ref;

      options = options != null ? options : {};
      options.pos = (_ref = options.pos) != null ? _ref : {
        x: 0,
        y: 0
      };
      pos = new b2Vec2(options.pos.x, options.pos.y);
      character = new Character(this, pos);
      this.characters.push(character);
      return character;
    };

    Universe.prototype._createTerrain = function() {
      var cx, cy, h, w;

      w = 20 / 2;
      h = 10 / 2;
      cx = 0;
      cy = h;
      return this._terrain = [
        [
          {
            x: cx - w,
            y: cy - h
          }, {
            x: cx + w,
            y: cy - h
          }, {
            x: cx + w,
            y: cy + h
          }, {
            x: cx - w,
            y: cy + h
          }
        ]
      ];
    };

    Universe.prototype._updateTerrainBody = function() {
      var body, bodyDef, data, fixDef, poly, shape, v, _i, _j, _len, _len1, _ref, _results;

      body = this.world.GetBodyList();
      while (body) {
        data = body.GetUserData();
        if (data && data === "Terrain") {
          this.world.DestroyBody(body);
        }
        body = body.GetNext();
      }
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_staticBody;
      bodyDef.userData = "Terrain";
      fixDef = new b2Dynamics.b2FixtureDef();
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0;
      _ref = this._terrain;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        poly = _ref[_i];
        fixDef.shape = new b2Shapes.b2PolygonShape();
        shape = [];
        for (_j = 0, _len1 = poly.length; _j < _len1; _j++) {
          v = poly[_j];
          shape.push(new b2Vec2(v.x, v.y));
        }
        fixDef.shape.SetAsArray(shape, shape.length);
        _results.push(this.world.CreateBody(bodyDef).CreateFixture(fixDef));
      }
      return _results;
    };

    return Universe;

  })();

  Camera = (function() {
    function Camera(x, y, w, h, zoom) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.zoom = zoom != null ? zoom : 1.0;
    }

    Camera.prototype.worldToScreen = function(point) {
      return {
        x: (point.x - this.x) * settings.PPM + this.w / 2,
        y: (point.y - this.y) * settings.PPM + this.h / 2
      };
    };

    Camera.prototype.screenToWorld = function(point) {
      return {
        x: (point.x - this.w / 2) / settings.PPM + this.x,
        y: (point.y - this.h / 2) / settings.PPM + this.y
      };
    };

    Camera.prototype.screenToWorldUnits = function(point) {
      return {
        x: point.x / settings.PPM,
        y: point.y / settings.PPM
      };
    };

    Camera.prototype.worldToScreenUnits = function(point) {
      return {
        x: point.x * settings.PPM,
        y: point.y * settings.PPM
      };
    };

    Camera.prototype.copy = function() {
      return new Camera(this.x, this.y, this.w, this.h, this.zoom);
    };

    return Camera;

  })();

  Game = (function() {
    Game.prototype.camera = null;

    Game.prototype.paused = false;

    Game.prototype.camera_attached = true;

    Game.prototype._universe = null;

    Game.prototype._last_mouse_pos = {
      x: 0,
      y: 0
    };

    Game.prototype._mouse_down = false;

    Game.prototype._controlled_char = null;

    Game.prototype._dev = {
      enabled: false,
      text: null,
      new_char_options: {},
      new_char: false,
      new_text: null,
      select_text: null,
      control_text: null,
      selected_char: null,
      mouse_screen_x: 0,
      mouse_screen_y: 0,
      mouse_world_x: 0,
      mouse_world_y: 0
    };

    function Game(stage, graphics) {
      var style;

      this.stage = stage;
      this.graphics = graphics;
      this._changeNewChar = __bind(this._changeNewChar, this);
      this.camera = new Camera(0, 0, settings.WIDTH, settings.HEIGHT);
      this._universe = new Universe(this, this.graphics, this.camera);
      this._resetGui();
      this._dev.new_char_options = {
        pos: {
          x: -8,
          y: -10
        },
        type: "Jackie"
      };
      this.spawnCharacter();
      this._dev.new_char_options.pos.x = 8;
      this.spawnCharacter();
      this._controlled_char = this._universe.characters[0];
      style = {
        font: "15px Arial",
        fill: "#FFFFFF"
      };
      this._dev.text = new PIXI.Text("Dev-Mode", style);
      this._dev.text.position.x = 10;
      this._dev.text.position.y = 5;
      style = {
        font: "10px Arial",
        fill: "#FFFFFF"
      };
      this._dev.new_text = new PIXI.Text("Click to spawn Character", style);
      this._dev.select_text = new PIXI.Text("Selected", style);
      this._dev.control_text = new PIXI.Text("Controlled", style);
      if (settings.DEBUG) {
        this.toggleDevMode();
      }
    }

    Game.prototype.update = function() {
      var pos, size, w;

      if (!this.paused) {
        this._universe.update();
      }
      if (this.camera_attached && this._controlled_char) {
        pos = this._controlled_char.position();
        this.camera.x = pos.x;
        this.camera.y = pos.y;
      }
      if (this._dev.enabled) {
        if (this._dev.selected_char) {
          pos = this.camera.worldToScreen(this._dev.selected_char.position());
          size = this._dev.selected_char.size();
          w = this._dev.select_text.width;
          this._dev.select_text.position.x = Math.round(pos.x - w / 2);
          this._dev.select_text.position.y = Math.round(pos.y - size.h / 2 - 20);
        }
        if (this._controlled_char) {
          pos = this.camera.worldToScreen(this._controlled_char.position());
          size = this._controlled_char.size();
          w = this._dev.control_text.width;
          this._dev.control_text.position.x = Math.round(pos.x - w / 2);
          return this._dev.control_text.position.y = Math.round(pos.y - size.h / 2 - 10);
        }
      }
    };

    Game.prototype.draw = function() {
      return this._universe.draw();
    };

    Game.prototype.spawnCharacter = function() {
      var pos;

      this._dev.selected_char = this._universe.newCharacter(this._dev.new_char_options);
      if (this._dev.cur_char_gui.folder) {
        this._dev.cur_char_gui.folder.remove(this._dev.cur_char_gui.pos.x);
        this._dev.cur_char_gui.folder.remove(this._dev.cur_char_gui.pos.y);
        pos = this._dev.selected_char.position();
        this._dev.cur_char_gui.pos.x = this._dev.cur_char_gui.folder.add(pos, 'x').listen();
        return this._dev.cur_char_gui.pos.y = this._dev.cur_char_gui.folder.add(pos, 'y').listen();
      }
    };

    Game.prototype.toggleDevMode = function() {
      if (this._dev.enabled) {
        this.stage.removeChild(this._dev.text);
        if (this._dev.new_char) {
          this.stage.removeChild(this._dev.new_text);
        }
        this.stage.removeChild(this._dev.select_text);
        this.stage.removeChild(this._dev.control_text);
        this._dev.gui.destroy();
      } else {
        this.stage.addChild(this._dev.text);
        if (this._dev.new_char) {
          this.stage.addChild(this._dev.new_text);
        }
        this.stage.addChild(this._dev.select_text);
        this.stage.addChild(this._dev.control_text);
        this._resetGui();
        this._createGui();
      }
      return this._dev.enabled = !this._dev.enabled;
    };

    Game.prototype.toggleDebugDraw = function() {
      return this._universe.toggleDebugDraw();
    };

    Game.prototype.onKeyDown = function(key_code) {
      if (key_code === 65) {
        return this._controlled_char.startMoveLeft();
      } else if (key_code === 68) {
        return this._controlled_char.startMoveRight();
      } else if (key_code === 87) {
        return this._controlled_char.startJump();
      }
    };

    Game.prototype.onKeyUp = function(key_code) {
      if (key_code === 65) {
        return this._controlled_char.endMoveLeft();
      } else if (key_code === 68) {
        return this._controlled_char.endMoveRight();
      } else if (key_code === 87) {
        return this._controlled_char.endJump();
      }
    };

    Game.prototype.onMouseDown = function(screen_pos) {
      this._mouse_down = true;
      if (this._dev.new_char) {
        this._dev.new_char_options.pos.x = this._dev.mouse_world_x;
        this._dev.new_char_options.pos.y = this._dev.mouse_world_y;
        return this.spawnCharacter();
      }
    };

    Game.prototype.onMouseUp = function(screen_pos) {
      return this._mouse_down = false;
    };

    Game.prototype.onMouseMove = function(screen_pos) {
      var dp, h, w;

      if (this._mouse_down && this._dev.enabled) {
        dp = {
          x: screen_pos.x - this._last_mouse_pos.x,
          y: screen_pos.y - this._last_mouse_pos.y
        };
        dp = this.camera.screenToWorldUnits(dp);
        this.camera.x -= dp.x;
        this.camera.y -= dp.y;
      }
      this._last_mouse_pos = screen_pos;
      this._dev.mouse_screen_x = screen_pos.x;
      this._dev.mouse_screen_y = screen_pos.y;
      w = this.camera.screenToWorld(screen_pos);
      this._dev.mouse_world_x = w.x;
      this._dev.mouse_world_y = w.y;
      if (this._dev.new_char) {
        w = this._dev.new_text.width;
        h = this._dev.new_text.height;
        this._dev.new_text.position.x = screen_pos.x - w / 2;
        return this._dev.new_text.position.y = screen_pos.y - h;
      }
    };

    Game.prototype.onMouseWheel = function(delta) {};

    Game.prototype.controlCharacter = function() {
      if (this._dev.selected_char) {
        this._controlled_char = this._dev.selected_char;
        return this._createGuiControlledChar(this._dev.char_gui.folder);
      }
    };

    Game.prototype._changeNewChar = function(value) {
      if (value) {
        return this.stage.addChild(this._dev.new_text);
      } else {
        return this.stage.removeChild(this._dev.new_text);
      }
    };

    Game.prototype._resetGui = function() {
      this._dev.gui = null;
      this._dev.mouse_gui = {
        folder: null
      };
      this._dev.game_gui = {
        folder: null,
        debug_draw: null,
        paused: null,
        camera: null
      };
      this._dev.char_gui = {
        folder: null
      };
      this._dev.new_char_gui = {
        folder: null,
        new_char: null,
        type: null
      };
      this._dev.cur_char_gui = {
        folder: null,
        control: null,
        pos: {}
      };
      return this._dev.con_char_gui = {
        folder: null,
        pos: {}
      };
    };

    Game.prototype._createGui = function() {
      this._dev.gui = new dat.GUI();
      this._dev.gui.add(this, 'toggleDevMode');
      this._createGuiMouseCoords(this._dev.gui);
      this._createGuiGame(this._dev.gui);
      return this._createGuiCharacter(this._dev.gui);
    };

    Game.prototype._createGuiMouseCoords = function(parent) {
      var f;

      f = parent.addFolder('Mouse Coords');
      this._dev.mouse_gui.folder = f;
      f.add(this._dev, 'mouse_screen_x').listen();
      f.add(this._dev, 'mouse_screen_y').listen();
      f.add(this._dev, 'mouse_world_x').listen();
      return f.add(this._dev, 'mouse_world_y').listen();
    };

    Game.prototype._createGuiGame = function(parent) {
      var f;

      f = parent.addFolder('Game');
      this._dev.game_gui.folder = f;
      this._dev.game_gui.debug_draw = f.add(this, 'toggleDebugDraw');
      this._dev.game_gui.paused = f.add(this, 'paused');
      this._dev.game_gui.camera = f.add(this, 'camera_attached');
      return f.open();
    };

    Game.prototype._createGuiCharacter = function(parent) {
      var f;

      f = parent.addFolder('Characters');
      this._dev.char_gui.folder = f;
      this._createGuiNewChar(f);
      this._createGuiSelectedChar(f);
      return this._createGuiControlledChar(f);
    };

    Game.prototype._createGuiNewChar = function(parent) {
      var f;

      f = parent.addFolder('New Character');
      this._dev.new_char_gui.folder = f;
      this._dev.new_char_gui.new_char = f.add(this._dev, 'new_char');
      this._dev.new_char_gui.new_char.onChange(this._changeNewChar);
      return this._dev.new_char_gui.type = f.add(this._dev.new_char_options, 'type', ['Jackie', 'Goku']);
    };

    Game.prototype._createGuiSelectedChar = function(parent) {
      var f, pos;

      f = parent.addFolder('Selected Character');
      this._dev.cur_char_gui.folder = f;
      this._dev.cur_char_gui.control = f.add(this, 'controlCharacter').listen();
      pos = this._dev.selected_char.position();
      this._dev.cur_char_gui.pos.x = f.add(pos, 'x').listen();
      return this._dev.cur_char_gui.pos.y = f.add(pos, 'y').listen();
    };

    Game.prototype._createGuiControlledChar = function(parent) {
      var f, pos;

      if (this._dev.con_char_gui.folder) {
        this._dev.con_char_gui.folder.remove(this._dev.con_char_gui.pos.x);
        this._dev.con_char_gui.folder.remove(this._dev.con_char_gui.pos.y);
      } else {
        this._dev.con_char_gui.folder = parent.addFolder('Controlled Character');
      }
      f = this._dev.con_char_gui.folder;
      pos = this._controlled_char.position();
      this._dev.con_char_gui.pos.x = f.add(pos, 'x').listen();
      return this._dev.con_char_gui.pos.y = f.add(pos, 'y').listen();
    };

    return Game;

  })();

  $(function() {
    var DOM_LOADED, assets, loader;

    DOM_LOADED = true;
    assets = ["assets/img/jackie_chun.json"];
    loader = new PIXI.AssetLoader(assets);
    loader.onComplete = main;
    return loader.load();
  });

  W = 0;

  H = 0;

  stance = null;

  main = function() {
    var black, blurHandler, body, canvas, clear, clickHandler, container, draw, event_catcher, focusHandler, game, graphics, keyDownListener, keyUpListener, main_loop, mouseDownHandler, mouseMoveHandler, mouseOutHandler, mouseUpHandler, mouseWheelHandler, onBeforeUnload, onResize, queue, renderer, stage, t, update;

    W = settings.FULL_SCREEN ? window.innerWidth : settings.WIDTH;
    H = settings.FULL_SCREEN ? window.innerHeight : settings.HEIGHT;
    body = $('body');
    container = $('<div>');
    container.css('margin-right', 'auto');
    container.css('margin-left', 'auto');
    container.css('width', "" + W + "px");
    body.append(container);
    black = 0x000000;
    stage = new PIXI.Stage(black);
    renderer = PIXI.autoDetectRenderer(W, H);
    container.append(renderer.view);
    canvas = $('canvas')[0];
    graphics = new PIXI.Graphics();
    stage.addChild(graphics);
    game = new Game(stage, graphics);
    onResize = function() {
      return log_input("resize");
    };
    keyDownListener = function(e) {
      log_input("key down:", e.keyCode);
      if (e.keyCode === 192) {
        game.toggleDevMode();
      }
      return game.onKeyDown(e.keyCode);
    };
    keyUpListener = function(e) {
      log_input("key up:", e.keyCode);
      return game.onKeyUp(e.keyCode);
    };
    onBeforeUnload = function(e) {
      return log_input("leaving");
    };
    mouseMoveHandler = function(e) {
      var x, y;

      x = e.layerX;
      y = e.layerY;
      log_input("mouse:", x, y);
      return game.onMouseMove({
        x: x,
        y: y
      });
    };
    clickHandler = function(e) {
      var x, y;

      x = e.layerX;
      y = e.layerY;
      return log_input("click:", x, y);
    };
    mouseDownHandler = function(e) {
      var x, y;

      log_input("mouse down");
      x = e.layerX;
      y = e.layerY;
      return game.onMouseDown({
        x: x,
        y: y
      });
    };
    mouseUpHandler = function(e) {
      var x, y;

      log_input("mouse up");
      x = e.layerX;
      y = e.layerY;
      return game.onMouseUp({
        x: x,
        y: y
      });
    };
    mouseOutHandler = function(e) {
      return log_input("mouse out");
    };
    mouseWheelHandler = function(e) {
      var delta;

      delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail));
      return log_input("mouse wheel: ", delta);
    };
    focusHandler = function(e) {
      return log_input("focus");
    };
    blurHandler = function(e) {
      return log_input("blur");
    };
    event_catcher = canvas;
    window.onresize = onResize;
    document.body.addEventListener('keydown', keyDownListener, false);
    document.body.addEventListener('keyup', keyUpListener, false);
    window.onbeforeunload = onBeforeUnload;
    event_catcher.addEventListener('mousemove', mouseMoveHandler, false);
    event_catcher.addEventListener('click', clickHandler, false);
    event_catcher.addEventListener('mousedown', mouseDownHandler, false);
    event_catcher.addEventListener('mouseup', mouseUpHandler, false);
    event_catcher.addEventListener('mouseout', mouseOutHandler, false);
    event_catcher.addEventListener('DOMMouseScroll', mouseWheelHandler, false);
    event_catcher.addEventListener('mousewheel', mouseWheelHandler, false);
    event_catcher.addEventListener('focus', focusHandler, false);
    event_catcher.addEventListener('blur', blurHandler, false);
    main_loop = function() {
      update();
      clear();
      draw();
      return queue();
    };
    update = function() {
      return game.update();
    };
    clear = function() {
      return graphics.clear();
    };
    draw = function() {
      game.draw();
      return renderer.render(stage);
    };
    queue = function() {
      return window.requestAnimationFrame(main_loop);
    };
    t = function() {
      var anim, i, stand, tex, texture, _i, _j;

      anim = [];
      tex = PIXI.Texture.fromFrame("jackie_stand_01");
      anim.push(tex);
      for (i = _i = 1; _i <= 5; i = ++_i) {
        texture = PIXI.Texture.fromFrame("jackie_stance_0" + i);
        anim.push(texture);
      }
      for (i = _j = 0; _j <= 4; i = ++_j) {
        texture = PIXI.Texture.fromFrame("jackie_stance_0" + (5 - i));
        anim.push(texture);
      }
      anim.push(tex);
      stand = PIXI.Sprite.fromFrame("jackie_stand_01");
      stand.position.x = 32;
      stand.position.y = 64;
      stage.addChild(stand);
      stance = new PIXI.MovieClip(anim);
      stance.position.x = 100;
      stance.position.y = 100;
      stance.anchor.x = 0;
      stance.anchor.y = 1;
      stance.animationSpeed = 0.2;
      stance.loop = false;
      stance.play();
      stage.addChild(stance);
      return main_loop();
    };
    return main_loop();
  };

  log_input = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (settings.PRINT_INPUT) {
      return console.log.apply(console, args);
    }
  };

  Planet = (function() {
    function Planet() {}

    return Planet;

  })();

  ParticleSystem = (function() {
    function ParticleSystem(max_particles, update_fn, draw_fn) {
      this.max_particles = max_particles;
      this.update_fn = update_fn;
      this.draw_fn = draw_fn;
      this.particles = [];
      this.emitters = [];
      this.fields = [];
    }

    ParticleSystem.prototype.update = function() {
      var e, p, _i, _j, _len, _len1, _ref, _ref1, _results;

      _ref = this.emitters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        this._emit(e);
      }
      _ref1 = this.particles;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        _results.push(this._updateParticle(p));
      }
      return _results;
    };

    ParticleSystem.prototype.draw = function() {
      var p, _i, _len, _ref, _results;

      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(this.draw_fn(p));
      }
      return _results;
    };

    ParticleSystem.prototype.addEmitter = function(emitter) {
      return this.emitters.push(emitter);
    };

    ParticleSystem.prototype.addField = function(field) {
      return this.fields.push(field);
    };

    ParticleSystem.prototype.removeEmitter = function(emitter) {
      return this.emitters = this.emitters.filter(function(e) {
        return e !== emitter;
      });
    };

    ParticleSystem.prototype.removeField = function(field) {
      return this.fields = this.fields.filter(function(f) {
        return f !== field;
      });
    };

    ParticleSystem.prototype._addParticle = function(particle) {
      if (this.particles.length < this.max_particles) {
        return this.particles.push(particle);
      }
    };

    ParticleSystem.prototype._emit = function(e) {
      var i, _i, _ref, _results;

      if (!e.active) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = e.rate; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this._addParticle(e.particle_fn()));
      }
      return _results;
    };

    ParticleSystem.prototype._updateParticle = function(p) {
      var dir_x, dir_y, f, field_acl, force, _i, _len, _ref;

      field_acl = {
        x: 0,
        y: 0
      };
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        dir_x = f.pos.x - p.pos.x;
        dir_y = f.pos.y - p.pos.y;
        force = f.strength / Math.pow(dir_x * dir_x + dir_y * dir_y, 1.5);
        field_acl.x += dir_x * force;
        field_acl.y += dir_y * force;
      }
      this.update_fn(p, field_acl);
      p.life--;
      if (p.life <= 0) {
        return this.particles = this.particles.filter(function(par) {
          return par !== p;
        });
      }
    };

    return ParticleSystem;

  })();

}).call(this);
