// Generated by CoffeeScript 1.6.2
(function() {
  var BaseCharacter, Camera, Characters, DebugDraw, Energy, Game, Goku, H, Jackie, ParticleSystem, Planet, Universe, W, b2Collision, b2Common, b2Contacts, b2Controllers, b2DebugDraw, b2Dynamics, b2Joints, b2Math, b2Shapes, b2Vec2, boundedValue, log_input, main, settings, stance,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  settings = {
    DEBUG: true,
    PRINT_INPUT: false,
    FULL_SCREEN: false,
    WIDTH: 900,
    HEIGHT: 600,
    PPM: 30,
    BOX2D_TIME_STEP: 1 / 60,
    BOX2D_VI: 10,
    BOX2D_PI: 10
  };

  settings.ENERGY_BAR = {
    width: settings.WIDTH * 0.6,
    height: settings.WIDTH * 0.6 * 0.05,
    x: settings.WIDTH / 2 - settings.WIDTH * 0.6 / 2,
    y: 15
  };

  b2Common = Box2D.Common;

  b2Math = Box2D.Common.Math;

  b2Vec2 = b2Math.b2Vec2;

  b2Collision = Box2D.Collision;

  b2Shapes = Box2D.Collision.Shapes;

  b2Dynamics = Box2D.Dynamics;

  b2Contacts = Box2D.Dynamics.Contacts;

  b2Controllers = Box2D.Dynamics.Controllers;

  b2Joints = Box2D.Dynamics.Joints;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  dat.GUI.prototype.removeFolder = function(folder) {
    this.__ul.removeChild(folder.domElement.parentNode);
    delete this.__folders[folder.name];
    return this.onResize();
  };

  boundedValue = function(value, min, max) {
    var v;

    v = value - min;
    if (v < 0) {
      v = max - v;
    } else {
      v = (v % (max - min)) + min;
    }
    return v;
  };

  DebugDraw = (function(_super) {
    __extends(DebugDraw, _super);

    function DebugDraw(camera) {
      this.camera = camera;
      this._line_width = 1;
      this._alpha = 0.5;
      this._fill_alpha = 0.5;
      this.m_sprite = {
        graphics: {
          clear: function() {}
        }
      };
    }

    DebugDraw.prototype.SetSprite = function(_graphics) {
      this._graphics = _graphics;
    };

    DebugDraw.prototype.GetSprite = function() {
      return this._graphics;
    };

    DebugDraw.prototype.DrawCircle = function(center, radius, color) {
      this._graphics.alpha = this._alpha;
      this._graphics.lineStyle(this._line_width, color.color);
      center = this.camera.worldToScreen(center);
      return this._graphics.drawCircle(center.x, center.y, radius * settings.PPM);
    };

    DebugDraw.prototype.DrawPolygon = function(vertices, vertexCount, color) {
      var v, v0, _i, _len, _ref;

      this._graphics.lineStyle(this._line_width, color.color);
      this._graphics.alpha = this._alpha;
      v0 = vertices[0];
      v0 = this.camera.worldToScreen(v0);
      this._graphics.moveTo(v0.x, v0.y);
      _ref = vertices.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v = this.camera.worldToScreen(v);
        this._graphics.lineTo(v.x, v.y);
      }
      return this._graphics.lineTo(v0.x, v0.y);
    };

    DebugDraw.prototype.DrawSegment = function(p1, p2, color) {
      this._graphics.lineStyle(this._line_width, color.color);
      this._graphics.alpha = this._alpha;
      p1 = this.camera.worldToScreen(p1);
      p2 = this.camera.worldToScreen(p2);
      this._graphics.moveTo(p1.x, p1.y);
      return this._graphics.lineTo(p2.x, p2.y);
    };

    DebugDraw.prototype.DrawSolidCircle = function(center, radius, axis, color) {
      var edge;

      this._graphics.beginFill(color.color);
      this._graphics.fillAlpha = this._fill_alpha;
      this.DrawCircle(center, radius, color);
      this._graphics.endFill();
      axis = axis.Copy();
      axis.Normalize();
      axis.Multiply(radius);
      edge = center.Copy();
      edge.Add(axis);
      return this.DrawSegment(center, edge, color);
    };

    DebugDraw.prototype.DrawSolidPolygon = function(vertices, vertexCount, color) {
      this._graphics.beginFill(color.color);
      this._graphics.fillAlpha = this._fill_alpha;
      this.DrawPolygon(vertices, vertexCount, color);
      return this._graphics.endFill();
    };

    DebugDraw.prototype.DrawTransform = function(xf) {
      var p1, p2, p3;

      this._graphics.lineStyle(this._line_width, 0xFF0000);
      this._graphics.alpha = this._alpha;
      p1 = this.camera.worldToScreen(xf.position);
      p2 = {
        x: xf.position.x + xf.R.col1.x,
        y: xf.position.y + xf.R.col1.y
      };
      p2 = this.camera.worldToScreen(p2);
      p3 = {
        x: xf.position.x + xf.R.col2.x,
        y: xf.position.y + xf.R.col2.y
      };
      p3 = this.camera.worldToScreen(p3);
      this._graphics.moveTo(p1.x, p1.y);
      this._graphics.lineTo(p2.x, p2.y);
      this._graphics.moveTo(p1.x, p1.y);
      return this._graphics.lineTo(p3.x, p3.y);
    };

    DebugDraw.prototype.GetAlpha = function() {
      return this._alpha;
    };

    DebugDraw.prototype.GetDrawScale = function() {
      return this._scale;
    };

    DebugDraw.prototype.GetFillAlpha = function() {
      return this._fill_alpha;
    };

    DebugDraw.prototype.GetLineThickness = function() {
      return this._line_width;
    };

    DebugDraw.prototype.SetAlpha = function(_alpha) {
      this._alpha = _alpha;
    };

    DebugDraw.prototype.SetDrawScale = function(_scale) {
      this._scale = _scale;
    };

    DebugDraw.prototype.SetLineThickness = function(_line_width) {
      this._line_width = _line_width;
    };

    return DebugDraw;

  })(b2Dynamics.b2DebugDraw);

  Energy = (function() {
    function Energy(_max) {
      this._max = _max;
      this._current = this._max;
      this._strength = this._max;
    }

    Energy.prototype.strength = function() {
      return this._strength;
    };

    Energy.prototype.current = function() {
      return this._current;
    };

    Energy.prototype.max = function() {
      return this._max;
    };

    Energy.prototype.incStrength = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.decStrength(-amount);
      }
      prev = this._strength;
      this._strength = Math.min(this._strength + amount, this._current);
      return this._strength - prev;
    };

    Energy.prototype.decStrength = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.incStrength(-amount);
      }
      prev = this._strength;
      this._strength = Math.max(this._strength - amount, 0);
      return prev - this._strength;
    };

    Energy.prototype.setStrength = function(value) {
      var dif;

      dif = value - this._strength;
      return this.incStrength(dif);
    };

    Energy.prototype.incCurrent = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.decCurrent(-amount);
      }
      prev = this._current;
      this._current = Math.min(this._current + amount, this._max);
      return this._current - prev;
    };

    Energy.prototype.decCurrent = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.incCurrent(-amount);
      }
      prev = this._current;
      this._current = Math.max(this._current - amount, 0);
      if (this._strength > this._current) {
        this._strength = this._current;
      }
      return prev - this._current;
    };

    Energy.prototype.setCurrent = function(value) {
      var dif;

      dif = value - this._current;
      return this.incCurrent(dif);
    };

    Energy.prototype.incMax = function(amount) {
      if (amount < 0) {
        return -this.decMax(-amount);
      }
      this._max += amount;
      return amount;
    };

    Energy.prototype.decMax = function(amount) {
      var prev;

      if (amount < 0) {
        return -this.incMax(-amount);
      }
      prev = this._max;
      this._max = Math.max(this._max - amount, 0);
      if (this._current > this._max) {
        this._current = this._max;
      }
      if (this._strength > this._current) {
        this._strength = this._current;
      }
      return prev - this._max;
    };

    Energy.prototype.setMax = function(value) {
      var dif;

      dif = value - this._max;
      return this.incMax(dif);
    };

    return Energy;

  })();

  BaseCharacter = (function() {
    BaseCharacter.prototype.body = null;

    BaseCharacter.prototype.energy = null;

    BaseCharacter.prototype._stage = null;

    BaseCharacter.prototype._w = 0;

    BaseCharacter.prototype._h = 0;

    BaseCharacter.prototype._body_box = null;

    BaseCharacter.prototype._body_circle = null;

    BaseCharacter.prototype._move_direction = null;

    BaseCharacter.prototype._directions = {
      left: false,
      right: false,
      up: false,
      down: false
    };

    BaseCharacter.prototype._jumping = false;

    BaseCharacter.prototype._jump_str = 25;

    BaseCharacter.prototype._max_vel = 15;

    function BaseCharacter(universe, init_pos, type, click_callback) {
      this.universe = universe;
      this._stage = this.universe.game.game_stage;
      this._move_direction = new b2Vec2(0, 0);
      this.energy = new Energy(1000);
    }

    BaseCharacter.prototype.update = function() {
      var force, imp, pos, vel;

      vel = this.body.GetLinearVelocity();
      pos = this.body.GetPosition();
      force = this._move_direction.Copy();
      force.Multiply(500);
      this.body.ApplyForce(force, pos);
      if (this._jumping && this.onGround()) {
        imp = new b2Vec2(0, -this._jump_str);
        this.body.ApplyImpulse(imp, pos);
      }
      if (Math.abs(vel.x) > this._max_vel) {
        vel.x = (vel.x > 0 ? 1 : -1) * this._max_vel;
        this.body.SetLinearVelocity(vel);
      }
      return this.body.SetAwake(true);
    };

    BaseCharacter.prototype.draw = function() {};

    BaseCharacter.prototype.position = function() {
      return this.body.GetPosition();
    };

    BaseCharacter.prototype.setPosition = function(pos) {
      return this.body.SetPosition(pos);
    };

    BaseCharacter.prototype.size = function() {};

    BaseCharacter.prototype.onGround = function() {
      var a, b, below, contact, manifold, p, pos, _i, _len, _ref;

      contact = this.universe.world.GetContactList();
      while (contact) {
        a = contact.GetFixtureA();
        b = contact.GetFixtureB();
        if (contact.IsTouching() && (a === this._body_circle || b === this._body_circle)) {
          pos = this.body.GetPosition();
          manifold = new b2Collision.b2WorldManifold();
          contact.GetWorldManifold(manifold);
          below = true;
          _ref = manifold.m_points;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            below &= p.y > (pos.y + this._h + .1);
          }
          return below;
        }
        contact = contact.GetNext();
      }
      return false;
    };

    BaseCharacter.prototype.startJump = function() {
      return this._jumping = true;
    };

    BaseCharacter.prototype.endJump = function() {
      return this._jumping = false;
    };

    BaseCharacter.prototype.startMoveRight = function() {
      this._directions.right = true;
      return this._move_direction.x = 1;
    };

    BaseCharacter.prototype.endMoveRight = function() {
      this._directions.right = false;
      if (this._directions.left) {
        return this._move_direction.x = -1;
      } else {
        this._move_direction.x = 0;
        return this._stopMoveX();
      }
    };

    BaseCharacter.prototype.startMoveLeft = function() {
      this._directions.left = true;
      return this._move_direction.x = -1;
    };

    BaseCharacter.prototype.endMoveLeft = function() {
      this._directions.left = false;
      this._move_direction.x = (this._directions.right ? 1 : 0);
      if (this._directions.right) {
        return this._move_direction.x = 1;
      } else {
        this._move_direction.x = 0;
        return this._stopMoveX();
      }
    };

    BaseCharacter.prototype._stopMoveX = function() {
      var vel;

      vel = this.body.GetLinearVelocity();
      vel.x = 0;
      return this.body.SetLinearVelocity(vel);
    };

    BaseCharacter.prototype._positionSprite = function(sprite) {
      var pos;

      pos = this.universe.getDrawingPosWrapped(this.body.GetPosition());
      sprite.position.x = pos.x;
      sprite.position.y = pos.y;
      if (this._move_direction.x > 0) {
        return sprite.scale.x = 1;
      } else if (this._move_direction.x < 0) {
        return sprite.scale.x = -1;
      }
    };

    return BaseCharacter;

  })();

  Jackie = (function(_super) {
    __extends(Jackie, _super);

    function Jackie(universe, init_pos, click_callback) {
      var bodyDef, box, circle,
        _this = this;

      Jackie.__super__.constructor.call(this, universe, init_pos, click_callback);
      this.stand = PIXI.Sprite.fromFrame("jackie_stand_01");
      this.stand.anchor.x = .5;
      this.stand.anchor.y = .5;
      this._stage.addChild(this.stand);
      this.stand.setInteractive(true);
      this.stand.click = function(mousedata) {
        return click_callback(_this, mousedata);
      };
      this._w = .4;
      this._h = .5;
      this._offset = .1;
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      this.body = this.universe.world.CreateBody(bodyDef);
      box = new b2Shapes.b2PolygonShape();
      box.SetAsBox(this._w, this._h);
      this._body_box = this.body.CreateFixture2(box, 5);
      circle = new b2Shapes.b2CircleShape(this._w);
      circle.SetLocalPosition(new b2Vec2(0, this._h));
      this._body_circle = this.body.CreateFixture2(circle, 0);
      this._body_circle.SetRestitution(0);
      this.body.SetBullet(true);
      this.body.SetFixedRotation(true);
      this.body.SetPosition(init_pos);
    }

    Jackie.prototype.update = function() {
      return Jackie.__super__.update.call(this);
    };

    Jackie.prototype.draw = function() {
      return this._positionSprite(this.stand);
    };

    Jackie.prototype.size = function() {
      return {
        w: this.stand.width,
        h: this.stand.height
      };
    };

    return Jackie;

  })(BaseCharacter);

  Goku = (function(_super) {
    __extends(Goku, _super);

    function Goku(universe, init_pos, click_callback) {
      var bodyDef, box, circle,
        _this = this;

      Goku.__super__.constructor.call(this, universe, init_pos, click_callback);
      this._jump_str = 15;
      this.stand = PIXI.Sprite.fromFrame("goku_stand_01");
      this.stand.anchor.x = .5;
      this.stand.anchor.y = .5;
      this._stage.addChild(this.stand);
      this.stand.setInteractive(true);
      this.stand.click = function(mousedata) {
        return click_callback(_this, mousedata);
      };
      this._w = .3;
      this._h = .4;
      this._offset = 0;
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      this.body = this.universe.world.CreateBody(bodyDef);
      box = new b2Shapes.b2PolygonShape();
      box.SetAsBox(this._w, this._h);
      this._body_box = this.body.CreateFixture2(box, 5);
      circle = new b2Shapes.b2CircleShape(this._w);
      circle.SetLocalPosition(new b2Vec2(0, this._h));
      this._body_circle = this.body.CreateFixture2(circle, 0);
      this._body_circle.SetRestitution(0);
      this.body.SetBullet(true);
      this.body.SetFixedRotation(true);
      this.body.SetPosition(init_pos);
    }

    Goku.prototype.update = function() {
      return Goku.__super__.update.call(this);
    };

    Goku.prototype.draw = function() {
      return this._positionSprite(this.stand);
    };

    Goku.prototype.size = function() {
      return {
        w: this.stand.width,
        h: this.stand.height
      };
    };

    return Goku;

  })(BaseCharacter);

  Characters = (function() {
    function Characters() {}

    Characters.JACKIE = "Jackie";

    Characters.GOKU = "Goku";

    Characters.DEFAULT = "Defualt";

    Characters.TYPES = [Characters.DEFAULT, Characters.JACKIE, Characters.GOKU];

    Characters.newCharacter = function(universe, init_pos, type, click_callback) {
      var Char;

      Char = null;
      switch (type) {
        case this.JACKIE:
          Char = Jackie;
          break;
        case this.GOKU:
          Char = Goku;
      }
      return new Char(universe, init_pos, click_callback);
    };

    return Characters;

  })();

  Universe = (function() {
    Universe.prototype.planets = [];

    Universe.prototype.characters = [];

    Universe.prototype._debug_draw = false;

    Universe.prototype._debug_drawer = null;

    Universe.prototype.__terrain_width = 100;

    Universe.prototype.db_draw_flags = {
      aabb: b2DebugDraw.e_aabbBit,
      center: b2DebugDraw.e_centerOfMassBit,
      control: b2DebugDraw.e_controllerBit,
      joint: b2DebugDraw.e_jointBit,
      pair: b2DebugDraw.e_pairBit,
      shape: b2DebugDraw.e_shapeBit
    };

    function Universe(game, graphics, camera) {
      var bodyDef, doSleep, fixDef, gravity;

      this.game = game;
      this.graphics = graphics;
      this.camera = camera;
      gravity = new b2Vec2(0, 20);
      this.world = new b2Dynamics.b2World(gravity, doSleep = true);
      this._debug_drawer = new DebugDraw(this.camera);
      this._debug_drawer.SetSprite(this.graphics);
      this._debug_drawer.SetDrawScale(1);
      this._debug_drawer.SetFillAlpha(0.3);
      this._debug_drawer.SetLineThickness(1.0);
      this._debug_drawer.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit | b2DebugDraw.e_centerOfMassBit | b2DebugDraw.e_controllerBit | b2DebugDraw.e_pairBit | b2DebugDraw.e_aabbBit);
      this.world.SetDebugDraw(this._debug_drawer);
      this._terrain = [];
      this._createTerrain();
      this._updateTerrainBody();
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_dynamicBody;
      bodyDef.position.x = 0;
      bodyDef.position.y = -10;
      fixDef = new b2Dynamics.b2FixtureDef();
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.2;
      fixDef.shape = new b2Shapes.b2CircleShape(1);
      this.world.CreateBody(bodyDef).CreateFixture(fixDef);
    }

    Universe.prototype.update = function() {
      var c, _i, _len, _ref;

      _ref = this.characters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.update();
      }
      this._wrapObjects();
      this.world.Step(settings.BOX2D_TIME_STEP, settings.BOX2D_VI, settings.BOX2D_PI);
      return this.world.ClearForces();
    };

    Universe.prototype._wrapObjects = function() {
      var body, new_pos, _results;

      body = this.world.GetBodyList();
      _results = [];
      while (body) {
        new_pos = this.boundedPoint(body.GetPosition());
        body.SetPosition(new b2Vec2(new_pos.x, new_pos.y));
        _results.push(body = body.GetNext());
      }
      return _results;
    };

    Universe.prototype.draw = function() {
      var c, _i, _len, _ref;

      _ref = this.characters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.draw();
      }
      if (this._debug_draw) {
        return this.world.DrawDebugData();
      }
    };

    Universe.prototype.getDrawingPosWrapped = function(pos, bounds) {
      var alt_pos, alt_x, alt_y, max_x, max_y, min_x, min_y, screen_alt_pos, screen_pos, _i, _len;

      screen_pos = this.camera.worldToScreen(pos);
      if (this.camera.onScreen(screen_pos)) {
        return screen_pos;
      }
      if (!bounds) {
        bounds = this.getBounds();
      }
      min_x = bounds.x - bounds.w / 2;
      max_x = min_x + bounds.w * 2;
      min_y = bounds.y - bounds.h / 2;
      max_y = min_y + bounds.h * 2;
      alt_x = boundedValue(pos.x + bounds.w, min_x, max_x);
      alt_y = boundedValue(pos.y + bounds.h, min_y, max_y);
      alt_pos = [
        {
          x: alt_x,
          y: pos.y
        }, {
          x: pos.y,
          y: alt_y
        }, {
          x: alt_x,
          y: alt_y
        }
      ];
      for (_i = 0, _len = alt_pos.length; _i < _len; _i++) {
        pos = alt_pos[_i];
        screen_alt_pos = this.camera.worldToScreen(pos);
        if (this.camera.onScreen(screen_alt_pos)) {
          return screen_alt_pos;
        }
      }
      return screen_pos;
    };

    Universe.prototype.getBounds = function() {
      return {
        x: -this.__terrain_width / 2,
        y: -this.__terrain_width,
        w: this.__terrain_width,
        h: this.__terrain_width + 10
      };
    };

    Universe.prototype.boundedPoint = function(point, bounds) {
      var x, y;

      if (!bounds) {
        bounds = this.getBounds();
      }
      x = boundedValue(point.x, bounds.x, bounds.x + bounds.w);
      y = boundedValue(point.y, bounds.y, bounds.y + bounds.h);
      return {
        x: x,
        y: y
      };
    };

    Universe.prototype.toggleDebugDraw = function() {
      return this._debug_draw = !this._debug_draw;
    };

    Universe.prototype.addDebugDrawFlag = function(flag) {
      var flags;

      flags = this._debug_drawer.GetFlags();
      flags = flags | flag;
      return this._debug_drawer.SetFlags(flags);
    };

    Universe.prototype.removeDebugDrawFlag = function(flag) {
      var flags;

      flags = this._debug_drawer.GetFlags();
      flags = flags - flag;
      return this._debug_drawer.SetFlags(flags);
    };

    Universe.prototype.newCharacter = function(options, click_callback) {
      var character, pos, type, _ref, _ref1;

      options = options != null ? options : {};
      options.pos = (_ref = options.pos) != null ? _ref : {
        x: 0,
        y: 0
      };
      type = (_ref1 = options.type) != null ? _ref1 : "Goku";
      pos = new b2Vec2(options.pos.x, options.pos.y);
      character = Characters.newCharacter(this, pos, type, click_callback);
      this.characters.push(character);
      return character;
    };

    Universe.prototype._createTerrain = function() {
      var cx, cy, h, w;

      w = this.__terrain_width / 2;
      h = 10 / 2;
      cx = 0;
      cy = h;
      return this._terrain = [
        [
          {
            x: cx - w,
            y: cy - h
          }, {
            x: cx + w,
            y: cy - h
          }, {
            x: cx + w,
            y: cy + h
          }, {
            x: cx - w,
            y: cy + h
          }
        ]
      ];
    };

    Universe.prototype._updateTerrainBody = function() {
      var body, bodyDef, data, fixDef, poly, shape, v, _i, _j, _len, _len1, _ref, _results;

      body = this.world.GetBodyList();
      while (body) {
        data = body.GetUserData();
        if (data && data === "Terrain") {
          this.world.DestroyBody(body);
        }
        body = body.GetNext();
      }
      bodyDef = new b2Dynamics.b2BodyDef();
      bodyDef.type = b2Dynamics.b2Body.b2_staticBody;
      bodyDef.userData = "Terrain";
      fixDef = new b2Dynamics.b2FixtureDef();
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0;
      _ref = this._terrain;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        poly = _ref[_i];
        fixDef.shape = new b2Shapes.b2PolygonShape();
        shape = [];
        for (_j = 0, _len1 = poly.length; _j < _len1; _j++) {
          v = poly[_j];
          shape.push(new b2Vec2(v.x, v.y));
        }
        fixDef.shape.SetAsArray(shape, shape.length);
        _results.push(this.world.CreateBody(bodyDef).CreateFixture(fixDef));
      }
      return _results;
    };

    return Universe;

  })();

  Camera = (function() {
    function Camera(x, y, w, h, zoom) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.zoom = zoom != null ? zoom : 1.0;
    }

    Camera.prototype.worldToScreen = function(point) {
      return {
        x: (point.x - this.x) * settings.PPM + this.w / 2,
        y: (point.y - this.y) * settings.PPM + this.h / 2
      };
    };

    Camera.prototype.screenToWorld = function(point) {
      return {
        x: (point.x - this.w / 2) / settings.PPM + this.x,
        y: (point.y - this.h / 2) / settings.PPM + this.y
      };
    };

    Camera.prototype.screenToWorldUnits = function(point) {
      return {
        x: point.x / settings.PPM,
        y: point.y / settings.PPM
      };
    };

    Camera.prototype.worldToScreenUnits = function(point) {
      return {
        x: point.x * settings.PPM,
        y: point.y * settings.PPM
      };
    };

    Camera.prototype.onScreen = function(point) {
      var _ref, _ref1;

      return (0 <= (_ref = point.x) && _ref <= settings.WIDTH) && (0 <= (_ref1 = point.y) && _ref1 <= settings.HEIGHT);
    };

    Camera.prototype.copy = function() {
      return new Camera(this.x, this.y, this.w, this.h, this.zoom);
    };

    return Camera;

  })();

  Game = (function() {
    Game.prototype.camera = null;

    Game.prototype.paused = false;

    Game.prototype.camera_attached = true;

    Game.prototype._universe = null;

    Game.prototype._last_mouse_pos = {
      x: 0,
      y: 0
    };

    Game.prototype._mouse_down = false;

    Game.prototype._controlled_char = null;

    Game.prototype._dev = {
      enabled: false,
      text: null,
      new_char_options: {
        pos: {
          x: 0,
          y: 0
        },
        type: Characters.GOKU
      },
      new_char: false,
      new_text: null,
      select_text: null,
      control_text: null,
      selected_char: null,
      mouse_screen_x: 0,
      mouse_screen_y: 0,
      mouse_world_x: 0,
      mouse_world_y: 0,
      show_aabb: true,
      show_center_of_mass: true,
      show_controller: true,
      show_joint: true,
      show_pair: true,
      show_shape: true
    };

    function Game(stage) {
      var style;

      this.stage = stage;
      this._onChangeNewChar = __bind(this._onChangeNewChar, this);
      this._onCharacterClick = __bind(this._onCharacterClick, this);
      this.hud_stage = new PIXI.DisplayObjectContainer();
      this.game_stage = new PIXI.DisplayObjectContainer();
      this.debug_stage = new PIXI.DisplayObjectContainer();
      this.stage.addChild(this.game_stage);
      this.stage.addChild(this.hud_stage);
      this.stage.addChild(this.debug_stage);
      this.debug_graphics = new PIXI.Graphics();
      this.hud_graphics = new PIXI.Graphics();
      this.debug_stage.addChild(this.debug_graphics);
      this.hud_stage.addChild(this.hud_graphics);
      this.camera = new Camera(0, 0, settings.WIDTH, settings.HEIGHT);
      this._universe = new Universe(this, this.debug_graphics, this.camera);
      this._resetGui();
      this._dev.new_char_options = {
        pos: {
          x: -8,
          y: -10
        },
        type: Characters.JACKIE
      };
      this.spawnCharacter();
      this._controlled_char = this._universe.characters[0];
      style = {
        font: "15px Arial",
        fill: "#FFFFFF"
      };
      this._dev.text = new PIXI.Text("Dev-Mode", style);
      this._dev.text.position.x = 10;
      this._dev.text.position.y = 5;
      style = {
        font: "10px Arial",
        fill: "#FFFFFF"
      };
      this._dev.new_text = new PIXI.Text("Click to spawn Character", style);
      this._dev.select_text = new PIXI.Text("Selected", style);
      this._dev.control_text = new PIXI.Text("Controlled", style);
      if (settings.DEBUG) {
        this.toggleDevMode();
      }
    }

    Game.prototype.update = function() {
      var pos, size, w;

      if (!this.paused) {
        this._universe.update();
      }
      if (this.camera_attached && this._controlled_char) {
        pos = this._controlled_char.position();
        this.camera.x = pos.x;
        this.camera.y = pos.y;
      }
      if (this._dev.enabled) {
        if (this._dev.selected_char) {
          pos = this.camera.worldToScreen(this._dev.selected_char.position());
          size = this._dev.selected_char.size();
          w = this._dev.select_text.width;
          this._dev.select_text.position.x = Math.round(pos.x - w / 2);
          this._dev.select_text.position.y = Math.round(pos.y - size.h / 2 - 10);
        } else {
          this._dev.select_text.position.x = -100;
          this._dev.select_text.position.y = 0;
        }
        if (this._controlled_char) {
          pos = this.camera.worldToScreen(this._controlled_char.position());
          size = this._controlled_char.size();
          w = this._dev.control_text.width;
          this._dev.control_text.position.x = Math.round(pos.x - w / 2);
          return this._dev.control_text.position.y = Math.round(pos.y - size.h / 2 - 10);
        } else {
          this._dev.control_text.position.x = -100;
          return this._dev.control_text.position.y = 0;
        }
      }
    };

    Game.prototype.clear = function() {
      this.debug_graphics.clear();
      return this.hud_graphics.clear();
    };

    Game.prototype.draw = function() {
      this._universe.draw();
      return this._drawEnergyBar();
    };

    Game.prototype._drawEnergyBar = function() {
      var energy, max_bar, width;

      if (!this._controlled_char) {
        return;
      }
      energy = this._controlled_char.energy;
      this.hud_graphics.lineStyle(1, 0xBB0000);
      this.hud_graphics.beginFill(0xFF0000);
      this.hud_graphics.fillAlpha = 0.4;
      max_bar = settings.ENERGY_BAR;
      this.hud_graphics.drawRect(max_bar.x, max_bar.y, max_bar.width, max_bar.height);
      this.hud_graphics.endFill();
      this.hud_graphics.lineStyle(1, 0x00BB00);
      this.hud_graphics.beginFill(0x00FF00);
      this.hud_graphics.fillAlpha = 0.4;
      if (energy.max() === 0) {
        width = 1;
      } else {
        width = Math.max((energy.current() / energy.max()) * max_bar.width, 1);
      }
      this.hud_graphics.drawRect(max_bar.x, max_bar.y, width, max_bar.height);
      this.hud_graphics.endFill();
      this.hud_graphics.lineStyle(1, 0x0000BB);
      this.hud_graphics.beginFill(0x0000FF);
      this.hud_graphics.fillAlpha = 0.4;
      if (energy.max() === 0) {
        width = 1;
      } else {
        width = Math.max((energy.strength() / energy.max()) * max_bar.width, 1);
      }
      this.hud_graphics.drawRect(max_bar.x, max_bar.y, width, max_bar.height);
      return this.hud_graphics.endFill();
    };

    Game.prototype._onCharacterClick = function(character, mousedata) {
      if (this._dev.enabled) {
        return this._selectCharacter(character);
      }
    };

    Game.prototype.spawnCharacter = function() {
      var c;

      return c = this._universe.newCharacter(this._dev.new_char_options, this._onCharacterClick);
    };

    Game.prototype.toggleDevMode = function() {
      if (this._dev.enabled) {
        this.stage.removeChild(this._dev.text);
        if (this._dev.new_char) {
          this.stage.removeChild(this._dev.new_text);
        }
        this.stage.removeChild(this._dev.select_text);
        this.stage.removeChild(this._dev.control_text);
        this._removeGui();
      } else {
        this.stage.addChild(this._dev.text);
        if (this._dev.new_char) {
          this.stage.addChild(this._dev.new_text);
        }
        this.stage.addChild(this._dev.select_text);
        this.stage.addChild(this._dev.control_text);
        this._createGui();
      }
      return this._dev.enabled = !this._dev.enabled;
    };

    Game.prototype.toggleDebugDraw = function() {
      return this._universe.toggleDebugDraw();
    };

    Game.prototype.onKeyDown = function(key_code) {
      if (this._controlled_char) {
        if (key_code === 65) {
          return this._controlled_char.startMoveLeft();
        } else if (key_code === 68) {
          return this._controlled_char.startMoveRight();
        } else if (key_code === 87) {
          return this._controlled_char.startJump();
        }
      }
    };

    Game.prototype.onKeyUp = function(key_code) {
      if (this._controlled_char) {
        if (key_code === 65) {
          return this._controlled_char.endMoveLeft();
        } else if (key_code === 68) {
          return this._controlled_char.endMoveRight();
        } else if (key_code === 87) {
          return this._controlled_char.endJump();
        }
      }
    };

    Game.prototype.onMouseDown = function(screen_pos) {
      this._mouse_down = true;
      if (this._dev.new_char) {
        this._dev.new_char_options.pos.x = this._dev.mouse_world_x;
        this._dev.new_char_options.pos.y = this._dev.mouse_world_y;
        return this.spawnCharacter();
      }
    };

    Game.prototype.onMouseUp = function(screen_pos) {
      return this._mouse_down = false;
    };

    Game.prototype.onMouseMove = function(screen_pos) {
      var dp, h, w;

      if (this._mouse_down && this._dev.enabled) {
        dp = {
          x: screen_pos.x - this._last_mouse_pos.x,
          y: screen_pos.y - this._last_mouse_pos.y
        };
        dp = this.camera.screenToWorldUnits(dp);
        this.camera.x -= dp.x;
        this.camera.y -= dp.y;
      }
      this._last_mouse_pos = screen_pos;
      this._dev.mouse_screen_x = screen_pos.x;
      this._dev.mouse_screen_y = screen_pos.y;
      w = this.camera.screenToWorld(screen_pos);
      this._dev.mouse_world_x = w.x;
      this._dev.mouse_world_y = w.y;
      if (this._dev.new_char) {
        w = this._dev.new_text.width;
        h = this._dev.new_text.height;
        this._dev.new_text.position.x = screen_pos.x - w / 2;
        return this._dev.new_text.position.y = screen_pos.y - h;
      }
    };

    Game.prototype.onMouseWheel = function(delta) {};

    /* Dev-Mode GUI stuff
    */


    Game.prototype.takeControl = function() {
      if (this._dev.selected_char) {
        if (this._controlled_char) {
          this._controlled_char.endMoveRight();
          this._controlled_char.endMoveLeft();
          this._controlled_char.endJump();
        }
        this._controlled_char = this._dev.selected_char;
        this._createControlledCharFolder();
        this._removeSelectedCharFolder();
        return this._dev.selected_char = null;
      }
    };

    Game.prototype._selectCharacter = function(character) {
      if (character === this._controlled_char || character === this._dev.selected_char) {
        return;
      }
      this._dev.selected_char = character;
      return this._createSelectedCharFolder();
    };

    Game.prototype._onChangeNewChar = function(value) {
      if (value) {
        return this.stage.addChild(this._dev.new_text);
      } else {
        return this.stage.removeChild(this._dev.new_text);
      }
    };

    Game.prototype._resetGui = function() {
      this._dev.gui = null;
      this._resetMouseCoordsFolder();
      this._resetGameFolder();
      this._resetCharacterFolder();
      if (this._dev.gui) {
        return this._removeGui();
      }
    };

    Game.prototype._createGui = function() {
      this._dev.gui = new dat.GUI();
      this._dev.gui.add(this, 'toggleDevMode');
      this._createMouseCoordsFolder();
      this._createGameFolder();
      this._createCharacterFolder();
      return this._dev.game_gui.folder.open();
    };

    Game.prototype._removeGui = function() {
      if (!this._dev.gui) {
        return;
      }
      this._dev.gui.destroy();
      return this._resetGui();
    };

    Game.prototype._resetMouseCoordsFolder = function() {
      return this._dev.mouse_gui = {
        folder: null,
        s_x: null,
        s_y: null,
        w_x: null,
        w_y: null
      };
    };

    Game.prototype._createMouseCoordsFolder = function() {
      var f, parent;

      parent = this._dev.gui;
      f = parent.addFolder('Mouse Coords');
      this._dev.mouse_gui.folder = f;
      this._dev.mouse_gui.s_x = f.add(this._dev, 'mouse_screen_x').listen();
      this._dev.mouse_gui.s_y = f.add(this._dev, 'mouse_screen_y').listen();
      this._dev.mouse_gui.w_x = f.add(this._dev, 'mouse_world_x').listen();
      return this._dev.mouse_gui.w_y = f.add(this._dev, 'mouse_world_y').listen();
    };

    Game.prototype._removeMouseCoordsFolder = function() {
      var parent;

      if (!this._dev.mouse_gui.folder) {
        return;
      }
      parent = this._dev.gui;
      parent.removeFolder(this._dev.mouse_gui.folder);
      return this._resetMouseCoordsFolder;
    };

    Game.prototype._resetGameFolder = function() {
      this._dev.game_gui = {
        folder: null,
        paused: null,
        camera: null
      };
      return this._resetDebugDrawFolder();
    };

    Game.prototype._createGameFolder = function() {
      var f, parent;

      parent = this._dev.gui;
      f = parent.addFolder('Game');
      this._dev.game_gui.folder = f;
      this._createDebugDrawFolder();
      this._dev.game_gui.paused = f.add(this, 'paused');
      return this._dev.game_gui.camera = f.add(this, 'camera_attached');
    };

    Game.prototype._removeGameFolder = function() {
      var parent;

      if (!this._dev.game_gui.folder) {
        return;
      }
      parent = this._dev.gui;
      parent.removeFolder(this._dev.game_gui.folder);
      return this._resetGameFolder();
    };

    Game.prototype._resetDebugDrawFolder = function() {
      return this._dev.debug_gui = {
        folder: null,
        debug_draw: null,
        aabb: null,
        center: null,
        control: null,
        joint: null,
        pair: null,
        shape: null
      };
    };

    Game.prototype._createDebugDrawFolder = function() {
      var f, onChange, parent,
        _this = this;

      parent = this._dev.game_gui.folder;
      f = parent.addFolder('Debug Draw');
      this._dev.debug_gui.folder = f;
      this._dev.debug_gui.debug_draw = f.add(this, 'toggleDebugDraw');
      onChange = function(flag) {
        return function(value) {
          if (value) {
            return _this._universe.addDebugDrawFlag(flag);
          } else {
            return _this._universe.removeDebugDrawFlag(flag);
          }
        };
      };
      this._dev.debug_gui.aabb = f.add(this._dev, 'show_aabb');
      this._dev.debug_gui.aabb.onChange(onChange(this._universe.db_draw_flags.aabb));
      this._dev.debug_gui.center = f.add(this._dev, 'show_center_of_mass');
      this._dev.debug_gui.center.onChange(onChange(this._universe.db_draw_flags.center));
      this._dev.debug_gui.control = f.add(this._dev, 'show_controller');
      this._dev.debug_gui.control.onChange(onChange(this._universe.db_draw_flags.control));
      this._dev.debug_gui.joint = f.add(this._dev, 'show_joint');
      this._dev.debug_gui.joint.onChange(onChange(this._universe.db_draw_flags.joint));
      this._dev.debug_gui.pair = f.add(this._dev, 'show_pair');
      this._dev.debug_gui.pair.onChange(onChange(this._universe.db_draw_flags.pair));
      this._dev.debug_gui.shape = f.add(this._dev, 'show_shape');
      return this._dev.debug_gui.shape.onChange(onChange(this._universe.db_draw_flags.shape));
    };

    Game.prototype._removeDebugDrawFolder = function() {
      var parent;

      if (!this._dev.debug_gui.folder) {
        return;
      }
      parent = this._dev.game_gui.folder;
      parent.removeFolder(this._dev.debug_gui.folder);
      return this._resetDebugDrawFolder();
    };

    Game.prototype._resetCharacterFolder = function() {
      this._dev.char_gui = {
        folder: null
      };
      this._resetNewCharFolder();
      this._resetSelectedCharFolder();
      return this._resetControlledCharFolder();
    };

    Game.prototype._createCharacterFolder = function() {
      var f, parent;

      parent = this._dev.gui;
      f = parent.addFolder('Characters');
      this._dev.char_gui.folder = f;
      this._createNewCharFolder();
      this._createSelectedCharFolder();
      return this._createControlledCharFolder();
    };

    Game.prototype._removeCharacterFolder = function() {
      var parent;

      if (!this._dev.char_gui.folder) {
        return;
      }
      parent = this._dev.gui;
      parent.removeFolder(this._dev.char_gui.folder);
      return this._resetCharacterFolder();
    };

    Game.prototype._resetNewCharFolder = function() {
      return this._dev.new_char_gui = {
        folder: null,
        new_char: null,
        type: null
      };
    };

    Game.prototype._createNewCharFolder = function() {
      var f, parent;

      parent = this._dev.char_gui.folder;
      f = parent.addFolder('New Character');
      this._dev.new_char_gui.folder = f;
      this._dev.new_char_gui.new_char = f.add(this._dev, 'new_char');
      this._dev.new_char_gui.new_char.onChange(this._onChangeNewChar);
      return this._dev.new_char_gui.type = f.add(this._dev.new_char_options, 'type', Characters.TYPES);
    };

    Game.prototype._removeNewCharFolder = function() {
      var parent;

      if (!this._dev.new_char_gui.folder) {
        return;
      }
      parent = this._dev.char_gui.folder;
      parent.removeFolder(this._dev.new_char_gui.folder);
      return this._resetNewCharFolder();
    };

    Game.prototype._resetSelectedCharFolder = function() {
      this._dev.cur_char_gui = {
        folder: null,
        control: null,
        pos: {
          x: 0,
          y: 0
        }
      };
      return this._resetSelectedEnergyFolder();
    };

    Game.prototype._createSelectedCharFolder = function() {
      var f, parent, pos;

      if (!this._dev.selected_char) {
        return;
      }
      if (!this._dev.cur_char_gui.folder) {
        parent = this._dev.char_gui.folder;
        f = parent.addFolder('Selected Character');
        this._dev.cur_char_gui.folder = f;
        this._dev.cur_char_gui.control = f.add(this, 'takeControl').listen();
      } else {
        f = this._dev.cur_char_gui.folder;
        f.remove(this._dev.cur_char_gui.pos.x);
        f.remove(this._dev.cur_char_gui.pos.y);
        this._removeSelectedEnergyFolder();
      }
      this._createSelectedEnergyFolder();
      pos = this._dev.selected_char.position();
      this._dev.cur_char_gui.pos.x = f.add(pos, 'x').listen();
      return this._dev.cur_char_gui.pos.y = f.add(pos, 'y').listen();
    };

    Game.prototype._removeSelectedCharFolder = function() {
      var parent;

      if (!this._dev.cur_char_gui.folder) {
        return;
      }
      parent = this._dev.char_gui.folder;
      parent.removeFolder(this._dev.cur_char_gui.folder);
      return this._resetSelectedCharFolder();
    };

    Game.prototype._resetControlledCharFolder = function() {
      this._dev.con_char_gui = {
        folder: null,
        pos: {
          x: 0,
          y: 0
        }
      };
      return this._resetControlledEnergyFolder();
    };

    Game.prototype._createControlledCharFolder = function() {
      var f, parent, pos;

      if (!this._controlled_char) {
        return;
      }
      if (!this._dev.con_char_gui.folder) {
        parent = this._dev.char_gui.folder;
        f = parent.addFolder('Controlled Character');
        this._dev.con_char_gui.folder = f;
      } else {
        f = this._dev.con_char_gui.folder;
        f.remove(this._dev.con_char_gui.pos.x);
        f.remove(this._dev.con_char_gui.pos.y);
        this._removeControlledEnergyFolder();
      }
      this._createControlledEnergyFolder();
      pos = this._controlled_char.position();
      this._dev.con_char_gui.pos.x = f.add(pos, 'x').listen();
      return this._dev.con_char_gui.pos.y = f.add(pos, 'y').listen();
    };

    Game.prototype._removeControlledCharFolder = function() {
      var parent;

      if (!this._dev.con_char_gui.folder) {
        return;
      }
      parent = this._dev.char_gui.folder;
      parent.removeFolder(this._dev.con_char_gui.folder);
      return this._resetControlledCharFolder();
    };

    Game.prototype._resetControlledEnergyFolder = function() {
      return this._dev.con_energy_gui = {
        folder: null,
        max_gui: null,
        current_gui: null,
        strength_gui: null,
        max: 0,
        current: 0,
        strength: 0
      };
    };

    Game.prototype._createControlledEnergyFolder = function() {
      var f, gui, parent;

      parent = this._dev.con_char_gui.folder;
      gui = this._dev.con_energy_gui;
      f = this._createEnergyFolder(parent, gui, this._controlled_char);
      return this._dev.con_energy_gui.folder = f;
    };

    Game.prototype._removeControlledEnergyFolder = function() {
      var parent;

      if (!this._dev.con_energy_gui.folder) {
        return;
      }
      parent = this._dev.con_char_gui.folder;
      parent.removeFolder(this._dev.con_energy_gui.folder);
      return this._resetControlledEnergyFolder();
    };

    Game.prototype._resetSelectedEnergyFolder = function() {
      return this._dev.cur_energy_gui = {
        folder: null,
        max_gui: null,
        current_gui: null,
        strength_gui: null,
        max: 0,
        current: 0,
        strength: 0
      };
    };

    Game.prototype._createSelectedEnergyFolder = function() {
      var f, gui, parent;

      parent = this._dev.cur_char_gui.folder;
      gui = this._dev.cur_energy_gui;
      f = this._createEnergyFolder(parent, gui, this._dev.selected_char);
      return this._dev.cur_energy_gui.folder = f;
    };

    Game.prototype._removeSelectedEnergyFolder = function() {
      var parent;

      if (!this._dev.cur_energy_gui.folder) {
        return;
      }
      parent = this._dev.cur_char_gui.folder;
      parent.removeFolder(this._dev.cur_energy_gui.folder);
      return this._resetSelectedEnergyFolder();
    };

    Game.prototype._createEnergyFolder = function(parent, gui, char) {
      var energy, f, updateCurrent, updateMax, updateStrength;

      if (!char) {
        return;
      }
      f = parent.addFolder('Energy');
      energy = char.energy;
      gui.max = energy.max();
      gui.current = energy.current();
      gui.strength = energy.strength();
      updateStrength = function() {
        gui.strength = energy.strength();
        return gui.strength_gui.updateDisplay();
      };
      updateCurrent = function(value) {
        gui.current = energy.current();
        gui.current_gui.updateDisplay();
        gui.strength_gui.updateDisplay();
        return updateStrength();
      };
      updateMax = function(value) {
        gui.max = energy.max();
        gui.max_gui.updateDisplay();
        return updateCurrent(value);
      };
      gui.max_gui = f.add(gui, 'max');
      gui.max_gui.onChange(function(value) {
        energy.setMax(value);
        return updateMax();
      });
      gui.current_gui = f.add(gui, 'current');
      gui.current_gui.onChange(function(value) {
        energy.setCurrent(value);
        return updateCurrent();
      });
      gui.strength_gui = f.add(gui, 'strength');
      gui.strength_gui.onChange(function(value) {
        energy.setStrength(value);
        return updateStrength();
      });
      return f;
    };

    return Game;

  })();

  $(function() {
    var DOM_LOADED, assets, loader;

    DOM_LOADED = true;
    assets = ["assets/img/jackie_chun.json", "assets/img/goku.json"];
    loader = new PIXI.AssetLoader(assets);
    loader.onComplete = main;
    return loader.load();
  });

  W = 0;

  H = 0;

  stance = null;

  main = function() {
    var black, blurHandler, body, canvas, clear, clickHandler, container, draw, event_catcher, focusHandler, game, keyDownListener, keyUpListener, main_loop, mouseDownHandler, mouseMoveHandler, mouseOutHandler, mouseUpHandler, mouseWheelHandler, onBeforeUnload, onResize, queue, renderer, stage, update;

    W = settings.FULL_SCREEN ? window.innerWidth : settings.WIDTH;
    H = settings.FULL_SCREEN ? window.innerHeight : settings.HEIGHT;
    body = $('body');
    container = $('<div>');
    container.css('margin-right', 'auto');
    container.css('margin-left', 'auto');
    container.css('width', "" + W + "px");
    body.append(container);
    black = 0x000000;
    stage = new PIXI.Stage(black);
    renderer = PIXI.autoDetectRenderer(W, H);
    container.append(renderer.view);
    canvas = $('canvas')[0];
    game = new Game(stage);
    onResize = function() {
      return log_input("resize");
    };
    keyDownListener = function(e) {
      log_input("key down:", e.keyCode);
      if (e.keyCode === 192) {
        game.toggleDevMode();
      }
      return game.onKeyDown(e.keyCode);
    };
    keyUpListener = function(e) {
      log_input("key up:", e.keyCode);
      return game.onKeyUp(e.keyCode);
    };
    onBeforeUnload = function(e) {
      return log_input("leaving");
    };
    mouseMoveHandler = function(e) {
      var x, y;

      x = e.layerX;
      y = e.layerY;
      log_input("mouse:", x, y);
      return game.onMouseMove({
        x: x,
        y: y
      });
    };
    clickHandler = function(e) {
      var x, y;

      x = e.layerX;
      y = e.layerY;
      return log_input("click:", x, y);
    };
    mouseDownHandler = function(e) {
      var x, y;

      log_input("mouse down");
      x = e.layerX;
      y = e.layerY;
      return game.onMouseDown({
        x: x,
        y: y
      });
    };
    mouseUpHandler = function(e) {
      var x, y;

      log_input("mouse up");
      x = e.layerX;
      y = e.layerY;
      return game.onMouseUp({
        x: x,
        y: y
      });
    };
    mouseOutHandler = function(e) {
      return log_input("mouse out");
    };
    mouseWheelHandler = function(e) {
      var delta;

      delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail));
      return log_input("mouse wheel: ", delta);
    };
    focusHandler = function(e) {
      return log_input("focus");
    };
    blurHandler = function(e) {
      return log_input("blur");
    };
    event_catcher = canvas;
    window.onresize = onResize;
    document.body.addEventListener('keydown', keyDownListener, false);
    document.body.addEventListener('keyup', keyUpListener, false);
    window.onbeforeunload = onBeforeUnload;
    event_catcher.addEventListener('mousemove', mouseMoveHandler, false);
    event_catcher.addEventListener('click', clickHandler, false);
    event_catcher.addEventListener('mousedown', mouseDownHandler, false);
    event_catcher.addEventListener('mouseup', mouseUpHandler, false);
    event_catcher.addEventListener('mouseout', mouseOutHandler, false);
    event_catcher.addEventListener('DOMMouseScroll', mouseWheelHandler, false);
    event_catcher.addEventListener('mousewheel', mouseWheelHandler, false);
    event_catcher.addEventListener('focus', focusHandler, false);
    event_catcher.addEventListener('blur', blurHandler, false);
    main_loop = function() {
      update();
      clear();
      draw();
      return queue();
    };
    update = function() {
      return game.update();
    };
    clear = function() {
      return game.clear();
    };
    draw = function() {
      game.draw();
      return renderer.render(stage);
    };
    queue = function() {
      return window.requestAnimationFrame(main_loop);
    };
    return main_loop();
  };

  log_input = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (settings.PRINT_INPUT) {
      return console.log.apply(console, args);
    }
  };

  Planet = (function() {
    function Planet() {}

    return Planet;

  })();

  ParticleSystem = (function() {
    function ParticleSystem(max_particles, update_fn, draw_fn) {
      this.max_particles = max_particles;
      this.update_fn = update_fn;
      this.draw_fn = draw_fn;
      this.particles = [];
      this.emitters = [];
      this.fields = [];
    }

    ParticleSystem.prototype.update = function() {
      var e, p, _i, _j, _len, _len1, _ref, _ref1, _results;

      _ref = this.emitters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        this._emit(e);
      }
      _ref1 = this.particles;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        _results.push(this._updateParticle(p));
      }
      return _results;
    };

    ParticleSystem.prototype.draw = function() {
      var p, _i, _len, _ref, _results;

      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(this.draw_fn(p));
      }
      return _results;
    };

    ParticleSystem.prototype.addEmitter = function(emitter) {
      return this.emitters.push(emitter);
    };

    ParticleSystem.prototype.addField = function(field) {
      return this.fields.push(field);
    };

    ParticleSystem.prototype.removeEmitter = function(emitter) {
      return this.emitters = this.emitters.filter(function(e) {
        return e !== emitter;
      });
    };

    ParticleSystem.prototype.removeField = function(field) {
      return this.fields = this.fields.filter(function(f) {
        return f !== field;
      });
    };

    ParticleSystem.prototype._addParticle = function(particle) {
      if (this.particles.length < this.max_particles) {
        return this.particles.push(particle);
      }
    };

    ParticleSystem.prototype._emit = function(e) {
      var i, _i, _ref, _results;

      if (!e.active) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = e.rate; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this._addParticle(e.particle_fn()));
      }
      return _results;
    };

    ParticleSystem.prototype._updateParticle = function(p) {
      var dir_x, dir_y, f, field_acl, force, _i, _len, _ref;

      field_acl = {
        x: 0,
        y: 0
      };
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        dir_x = f.pos.x - p.pos.x;
        dir_y = f.pos.y - p.pos.y;
        force = f.strength / Math.pow(dir_x * dir_x + dir_y * dir_y, 1.5);
        field_acl.x += dir_x * force;
        field_acl.y += dir_y * force;
      }
      this.update_fn(p, field_acl);
      p.life--;
      if (p.life <= 0) {
        return this.particles = this.particles.filter(function(par) {
          return par !== p;
        });
      }
    };

    return ParticleSystem;

  })();

}).call(this);
